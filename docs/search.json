[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Somite periodicity notebook",
    "section": "",
    "text": "About\nThis notebook sets out the bioinformatic analysis of somite development periods, for Ali Ahmed Seleit in the Aulehla Group at EMBL Heidelberg.\n\n\n\n\n\nVideo by Ali Ahmed Seleit"
  },
  {
    "objectID": "01-background.html",
    "href": "01-background.html",
    "title": "1  Background",
    "section": "",
    "text": "Somites are the earliest primitive segmental structures that form from presomatic mesoderm cells (PSM) in the embryo (Kim et al. 2011), later differentiating into vertebrae, ribs, and skeletal muscles. Somite formation occurs rhythmically and sequentially, with the time between the formation of each pair of somites referred to as the “period”. The period of somite formation varies greatly between species (Matsuda et al. 2020), and is controlled by a molecular oscillator, known as the ‘segmentation clock’, which drives waves of gene expression in developmental pathways.\nIt is not fully understood how the phase waves of the segmentation clock are initially established (Falk et al. 2022). To identify the genetic basis of these phase waves, Carina Vibe in Alexander Aulehla’s group at EMBL-Heidelberg used a CRISPR-Cas9 knock-in approach (Seleit, Aulehla, and Paix 2021) to establish a medaka Cab strain with an endogenous, fluorescing reporter gene (Her7-Venus) for the oscillation signalling pathway. This method allows the Aulehla Group to image somite formation and extract quantitative measures for segmentation clock dynamics. They determined that the southern Japanese Cab strain and the northern Japanese Kaga strain have divergent somite periodicity, where Kaga’s tends to be faster, and Cab’s slower (Figure 1.1), and selected them as the parental strains in an F2-cross. This notebook sets out the bioinformatic analyses involved in this project to identify the genetic variations associated with differences in somite periodicity.\n\n\n\n\n\nFigure 1.1: Comparison of period for three inbred medaka strains Cab, Kaga and HdrR. Kaga’s period is lower, and therefore it takes less time to form each somite than Cab. Figure generated by Ali Seleit.\n\n\n\n\n\n\n\n\nFalk, Henning J, Takehito Tomita, Gregor Mönke, Katie McDole, and Alexander Aulehla. 2022. “Imaging the Onset of Oscillatory Signaling Dynamics During Mouse Embryo Gastrulation.” Development (Cambridge, England) 149 (13): dev200083. https://doi.org/10.1242/dev.200083.\n\n\nKim, Woong, Takaaki Matsui, Masataka Yamao, Makoto Ishibashi, Kota Tamada, Toru Takumi, Kenji Kohno, et al. 2011. “The Period of the Somite Segmentation Clock Is Sensitive to Notch Activity.” Molecular Biology of the Cell 22 (18): 3541–49. https://doi.org/10.1091/mbc.e11-02-0139.\n\n\nMatsuda, Mitsuhiro, Hanako Hayashi, Jordi Garcia-Ojalvo, Kumiko Yoshioka-Kobayashi, Ryoichiro Kageyama, Yoshihiro Yamanaka, Makoto Ikeya, Junya Toguchida, Cantas Alev, and Miki Ebisuya. 2020. “Species-Specific Segmentation Clock Periods Are Due to Differential Biochemical Reaction Speeds.” Science 369 (6510): 1450–55.\n\n\nSeleit, Ali, Alexander Aulehla, and Alexandre Paix. 2021. “Endogenous Protein Tagging in Medaka Using a Simplified CRISPR/Cas9 Knock-in Approach.” eLife 10 (December): e75050. https://doi.org/10.7554/elife.75050."
  },
  {
    "objectID": "02-phenotypes.html#somite-development-period",
    "href": "02-phenotypes.html#somite-development-period",
    "title": "2  Phenotypes of interest",
    "section": "2.1 Somite development period",
    "text": "2.1 Somite development period\nFigure 2.1 shows the period data generated by pyBOAT for this study, for 100 illustrative F2 samples over 300 minutes. The same data can be represented by boxplots as shown in Figure 2.2. We experimented with using the F2 individuals’ mean period and period intercept as the phenotype of interest. The two measures are highly correlated (\\(Pearson's~r =\\) 0.84, \\(p\\) < 2.2 x 10-16), so after displaying the distributions for both measures in Figure 2.4, we only show the analysis of period intercept, as it would appear to potentially be more robust to the changes in slope that can be observed in Figure 2.1.\n\n\n\n\n\nFigure 2.1: PyBOAT results for 100 illustrative F2 samples, showing the period length in minutes over the course of 300 minutes. Period tends to increase over time, meaning that as the embryo develops, each successive somite takes longer to form. Figure generated by Ali Seleit.\n\n\n\n\n\n\n\n\n\nFigure 2.2: Period measurements for 70 F2 individuals displayed as boxplots with each individual’s median and interquartile range. Figure generated by Ali Seleit."
  },
  {
    "objectID": "02-phenotypes.html#unsegmented-presomitic-mesoderm-area-psm",
    "href": "02-phenotypes.html#unsegmented-presomitic-mesoderm-area-psm",
    "title": "2  Phenotypes of interest",
    "section": "2.2 Unsegmented presomitic mesoderm area (PSM)",
    "text": "2.2 Unsegmented presomitic mesoderm area (PSM)\nIn the proceeding analyses, we also included a second phenotype of interest: the total area of the unsegmented tissue at the stage where 10-11 somites had been formed (PSM area). As the measure is simply based on the total number of pixels covered by the embryo object, we considered it to be potentially more robust than the period measurements, and therefore included it as a type of positive control for the genetic association analyses on the period phenotype. The measurements for PSM area comparing F0 Cab and Kaga strains are shown in Figure 2.3.\n\n\n\n\n\nFigure 2.3: Measurements of unsegmented PSM area in pixels for the F0 individuals from the Cab strain (\\(N = 19\\)) and Kaga strain (\\(N = 10\\)). Kaga tends to have a smaller PSM than Cab. Figure generated by Ali Seleit."
  },
  {
    "objectID": "02-phenotypes.html#comparisons-between-f0-f1-and-f2-generations",
    "href": "02-phenotypes.html#comparisons-between-f0-f1-and-f2-generations",
    "title": "2  Phenotypes of interest",
    "section": "2.3 Comparisons between F0, F1 and F2 generations",
    "text": "2.3 Comparisons between F0, F1 and F2 generations\nFigure 2.4 shows the distributions of the period intercept and unsegmented PSM area phenotypes across the F0, F1 and F2 generations. In relation to the period intercept phenotype, only the Cab strain in shown for F0 because only the Cab strain carries the reporter gene, which prohibited the collection of data for Kaga using this pyBOAT method. However, from previous bright field image analyses (which did not require the reporter), we determined that the Kaga strain has a lower (i.e. faster) period than Cab by around 10 minutes (see Figure 1.1). Given these differences, the F1 generation shows the expected intermediate median between the Cab and Kaga F0 strains. We also expected to observe that the F2 generation has a similar median to the F1 generation, but with a wider variance that spans across the extremes of the two F0 parental strains.\nInstead, we observed that the F2 generation has a median that is slightly slower than the median of the slower-period F0 Cab strain. These observations were unlikely to have been caused by technical issues. A possible biological explanation is that there are more genetic combinations that slow down the clock rather than speed it up (Sanchez et al. 2022; Schröter and Oates 2010). This phenomenon could be exacerbated by the Cab and Kaga strains originating from different Japanese medaka populations (southern and northern respectively), which are understood to be at the point of speciation (Katsumura et al. 2019). This slower period may therefore be driven by a biological incompatibility between their genomes in cases where they do not have a complete chromosome from each parent (as the F1 generation does). We nevertheless proceeded with the genetic analysis with a view to potentially discovering the reason for this unusual distribution.\n\n\nCode\nIN_F01 = here::here(\"data/F0_F1_period.xlsx\")\nIN_F2 = here::here(\"config/phenos_with_reporter_genoandpheno.csv\")\n\n########################\n# Plotting parameters\n########################\n\n# Intercept\nintercept_pal = c(\"#8D99AE\", \"#2b2d42\")\n\n# Mean\nmean_pal = c(\"#177E89\", \"#084C61\")\n\n# PSM\nunsegmented_psm_area_pal = c(\"#D9D0DE\", \"#401F3E\")\n\n# Get lighter/darker functions\n\ndevtools::source_gist(\"c5015ee666cdf8d9f7e25fa3c8063c99\")\n\n########################\n# Read in file\n########################\n\ndf_f2 = readr::read_delim(IN_F2, delim = \";\") %>% \n  # add `GEN` column\n  dplyr::mutate(GEN = \"F2\")\n\n\n# Read in F0 and F1 data\ndf_f01 = readxl::read_xlsx(IN_F01) %>% \n  dplyr::mutate(sample = fish) %>% \n  dplyr::mutate(GEN = dplyr::case_when(str_detect(fish, \"^C\") ~ \"F0\",\n                                       str_detect(fish, \"^K\") ~ \"F1\"))\n\n# Bind two data frames\ndf_all = dplyr::bind_rows(df_f01, df_f2) %>% \n  # factorise Microscope\n  dplyr::mutate(Microscope = factor(Microscope, levels = c(\"AU\", \"DB\")))\n\n########################\n# Kruskal-Wallis test\n########################\n\n## Difference between microscopes in period intercept for F2s\n\nkw_df = df_all %>% \n  # take only F2 individuals\n  dplyr::filter(GEN == \"F2\") %>% \n  # pivot longer to put phenotypes values in one column\n  tidyr::pivot_longer(cols = c(mean, intercept, unsegmented_psm_area),\n                      names_to = \"phenotype\",\n                      values_to = \"value\") %>% \n  dplyr::group_by(phenotype) %>% \n  tidyr::nest() %>%\n  dplyr::mutate(model = purrr::map(data,\n                                   ~kruskal.test(x = .$value, g = .$Microscope))) %>%\n  dplyr::select(-data) %>% \n  dplyr::mutate(model_tidy = purrr::map(model, broom::tidy)) %>%\n  tidyr::unnest(model_tidy) %>% \n  rstatix::add_significance(p.col = \"p.value\") %>% \n  # remove model\n  dplyr::select(-model) %>% \n  # reduce to 3 digits\n  dplyr::mutate(p.value = signif(p.value, digits = 3)) %>% \n  # paste p-value with significance\n  dplyr::mutate(p_final = dplyr::case_when(p.value.signif == \"ns\" ~ paste(\"p =\", p.value),\n                                           TRUE ~ paste(\"p =\", p.value, p.value.signif))) %>% \n  # add `Microscope` column with 'DB' so that the text maps there on the plots\n  dplyr::mutate(Microscope = factor(\"DB\", levels = c(\"AU\", \"DB\")))\n\n########################\n# Plot\n########################\n\n########### Intercept\n\nintercept_fig = df_all %>% \n  # remove NAs\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot(aes(GEN, intercept, fill = Microscope)) +\n  geom_violin() + \n  geom_boxplot(width = 0.3) +\n  ggbeeswarm::geom_beeswarm(aes(GEN, intercept, colour = Microscope), size = 0.4, alpha = 0.5) +\n  facet_grid(cols = vars(Microscope)) + \n  scale_colour_manual(values = lighter(intercept_pal, amount = 50)) +\n  scale_fill_manual(values = darker(intercept_pal, amount = 50)) +\n  cowplot::theme_cowplot() +\n  theme(strip.background.x = element_blank(),\n        strip.text.x = element_text(face = \"bold\")) +\n  xlab(\"generation\") +\n  ylab(\"period intercept (minutes)\") +\n  guides(fill = \"none\",\n         colour = \"none\") +\n  # add p-value\n  geom_text(data = kw_df %>% \n              dplyr::filter(phenotype == \"intercept\"),\n            aes(x = \"F2\", y = -Inf, label = p_final,\n                vjust = -1\n            ))\n\n########### PSM\n\npsm_fig = df_all %>% \n  # remove NAs\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot(aes(GEN, unsegmented_psm_area, fill = Microscope)) +\n  geom_violin() + \n  geom_boxplot(width = 0.3) +\n  ggbeeswarm::geom_beeswarm(aes(GEN, unsegmented_psm_area, colour = Microscope), size = 0.4, alpha = 0.5) +\n  facet_grid(cols = vars(Microscope)) + \n  scale_colour_manual(values = lighter(unsegmented_psm_area_pal, amount = 50)) +\n  scale_fill_manual(values = darker(unsegmented_psm_area_pal, amount = 50)) +\n  cowplot::theme_cowplot() +\n  theme(strip.background.x = element_blank(),\n        strip.text.x = element_text(face = \"bold\")) +\n  xlab(\"generation\") +\n  ylab(\"unsegmented PSM area (pixels)\") +\n  guides(fill = \"none\",\n         colour = \"none\") +\n  # add p-value\n  geom_text(data = kw_df %>% \n              dplyr::filter(phenotype == \"unsegmented_psm_area\"),\n            aes(x = \"F2\", y = -Inf, label = p_final,\n                vjust = -1\n            ))\n\n\nperiod_final = cowplot::plot_grid(intercept_fig,\n                                  psm_fig,\n                                  align = \"hv\",\n                                  nrow = 2,\n                                  labels = c(\"A\", \"B\"),\n                                  label_size = 16)\n\nperiod_final\n\n\n\n\n\nFigure 2.4: Comparisons between the F0, F1 and F2 generations for period intercept and unsegmented PSM area. As only the Cab strain contains the reporter gene, the F0 only shows period intercept for Cab individuals (with the Kaga strain previously estimated to have a period of ~10 minutes slower than Cab). A: period intercept in minutes. B: unsegmented PSM area in pixels. \\(P\\)-values are derived from Kruskal-Wallis tests comparing the F2 individuals across microscopes. For unsegmented PSM area, data was only collected for the F2 generation. Code adapted from rule phenotype_plots in https://github.com/brettellebi/somites/blob/master/workflow/rules/08_extra.smk\n\n\n\n\nAnother important issue to note is that the F2 individuals were imaged using different microscopes of the same model (Zeiss LSM 780) but with different temperature control units and incubator boxes, denoted as ‘AU’ and ‘DB’.1 We noticed that there was a difference between the microscopes in their temperatures of 0.7-0.8°C, translating to a 4-minute difference in the F2 means for the period intercept measure (Kruskal-Wallis = 177.97, \\(p\\) = 1.34 x 10-40), and a 3.5-minute difference in the F2 means for the period mean measure (Kruskal-Wallis = 141.79, \\(p\\) = 1.08 x 10-32). This difference would need to be accounted for in the downstream analysis through either adjusting the phenotype prior to running the genetic association model, or by including microscope as a covariate in the model. For unsegmentated PSM area, we did not find a significant difference between microscopes, so we determined that it was not necessary to control for microscope in the downstream analysis for this phenotype.\n\n2.3.0.1 Inverse-normalisation\nTo resolve this difference between microscopes for the period intercept data, we elected to transform it for the F2 generation by “inverse-normalising” the period intercept within each microscope (Figure 2.5), and used this transformed phenotype for the downstream analysis. Inverse-normalisation is a rank-based normalisation approach which involves replacing the values in the phenotype vector with their rank (where ties are averaged), then converting the ranks into a normal distribution with the quantile function (Wichura 1988). The inverse-normalisation function I used for this analysis is set out in the following R code:\n\ninvnorm = function(x) {\n  res = rank(x)\n  # The arbitrary 0.5 value is added to the denominator below \n  # to avoid `qnorm()` returning 'Inf' for the last-ranked value\n  res = qnorm(res/(length(res)+0.5))\n  return(res)\n}\n\n\n\nCode\n# Set variables\n\n## Debug\nIN_F2 = here::here(\"config/phenos_with_reporter_genoandpheno.csv\")\nOUT_PNG = here::here(\"book/plots/phenotypes/invnorm_intercept.png\")\nOUT_PDF = here::here(\"book/plots/phenotypes/invnorm_intercept.pdf\")\n\n########################\n# Plotting parameters\n########################\n\n# Intercept\nintercept_pal = c(\"#8D99AE\", \"#2b2d42\")\n\n# Mean\nmean_pal = c(\"#177E89\", \"#084C61\")\n\n# PSM\nunsegmented_psm_area_pal = c(\"#D9D0DE\", \"#401F3E\")\n\n# Get lighter/darker functions\n\ndevtools::source_gist(\"c5015ee666cdf8d9f7e25fa3c8063c99\")\n\n########################\n# Read in file\n########################\n\ndf_f2 = readr::read_delim(IN_F2, delim = \";\") %>% \n  # add `GEN` column\n  dplyr::mutate(GEN = \"F2\") %>% \n  # factorise Microscope\n  dplyr::mutate(Microscope = factor(Microscope, levels = c(\"AU\", \"DB\")))\n\n# Get means per microscope\nf2_means_notrans = df_f2 %>% \n  dplyr::filter(!is.na(Microscope)) %>% \n  dplyr::group_by(Microscope) %>% \n  dplyr::summarise(MEAN = mean(intercept, na.rm = T))\n\n\n########################\n# Plot\n########################\n\n########### Histogram raw\n\nraw_fig = df_f2 %>% \n  # remove NAs\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot(aes(intercept)) +\n  geom_histogram(aes(y = ..density.., fill = Microscope), bins = 40) +\n  geom_density(aes(colour = Microscope)) +\n  geom_vline(data = f2_means_notrans, aes(xintercept = MEAN)) +\n  scale_fill_manual(values = intercept_pal) +\n  scale_colour_manual(values = darker(intercept_pal,amount = 75)) +\n  cowplot::theme_cowplot() + \n  facet_grid(rows = vars(GEN, Microscope)) +\n  xlab('period intercept') + \n  guides(fill = \"none\", colour = \"none\") +\n  labs(subtitle = \"original data\")\n\n########### Histogram inverse-normalised\n\ntrans_df = df_f2 %>% \n  # inverse-normalise within microscope\n  dplyr::group_by(Microscope) %>% \n  dplyr::mutate(intercept = invnorm(intercept)) %>% \n  dplyr::ungroup() %>% \n  # remove NAs\n  dplyr::filter(!is.na(Microscope))\n\n# Get means per microscope\nf2_means_trans = trans_df %>% \n  dplyr::filter(!is.na(Microscope)) %>% \n  dplyr::group_by(Microscope) %>% \n  dplyr::summarise(MEAN = mean(intercept, na.rm = T))\n\ntrans_fig = trans_df %>% \n  # plot\n  ggplot(aes(intercept)) +\n  geom_histogram(aes(y = ..density.., fill = Microscope), bins = 40) +\n  geom_density(aes(colour = Microscope)) +\n  geom_vline(data = f2_means_trans, aes(xintercept = MEAN)) +\n  scale_fill_manual(values = intercept_pal) +\n  scale_colour_manual(values = darker(intercept_pal,amount = 75)) +\n  cowplot::theme_cowplot() + \n  facet_grid(rows = vars(GEN, Microscope)) +\n  xlab('period intercept (inverse-normalised)') + \n  guides(fill = \"none\", colour = \"none\") +\n  labs(subtitle = \"inverse-normalised within microscope\")\n\n\n########### Together\n\nfinal = cowplot::plot_grid(raw_fig,\n                                  trans_fig,\n                                  align = \"hv\",\n                                  nrow = 2,\n                                  labels = c(\"A\", \"B\"),\n                                  label_size = 16)\n\nfinal\n\n\n\n\n\nFigure 2.5: Comparison of the period intercept phenotype data for the F2 generation before (A) and after (B) inverse-normalisation, with vertical lines marking the mean of each group. Code adapted from rule invnorm_intercept_plot in https://github.com/brettellebi/somites/blob/master/workflow/rules/08_extra.smk.\n\n\n\n\n\n\n\n\nKatsumura, Takafumi, Shoji Oda, Hiroshi Mitani, and Hiroki Oota. 2019. “Medaka Population Genome Structure and Demographic History Described via Genotyping-by-Sequencing.” G3 Genes|Genomes|Genetics 9 (1): 217–28. https://doi.org/10.1534/g3.118.200779.\n\n\nSanchez, Paul Gerald Layague, Victoria Mochulska, Christian Mauffette Denis, Gregor Mönke, Takehito Tomita, Nobuko Tsuchida-Straeten, Yvonne Petersen, Katharina F. Sonnen, Paul François, and Alexander Aulehla. 2022. “Arnold Tongue Entrainment Reveals Dynamical Principles of the Embryonic Segmentation Clock.” bioRxiv. https://doi.org/10.1101/2021.10.20.465101.\n\n\nSchröter, Christian, and Andrew C. Oates. 2010. “Segment Number and Axial Identity in a Segmentation Clock Period Mutant.” Current Biology 20 (14): 1254–58. https://doi.org/10.1016/j.cub.2010.05.071.\n\n\nWichura, Michael J. 1988. “Algorithm AS 241: The Percentage Points of the Normal Distribution.” Journal of the Royal Statistical Society. Series C (Applied Statistics) 37 (3): 477–84. https://doi.org/10.2307/2347330."
  },
  {
    "objectID": "03-F0-homozygosity.html#f0-coverage",
    "href": "03-F0-homozygosity.html#f0-coverage",
    "title": "3  F0 homozygosity",
    "section": "3.1 F0 coverage",
    "text": "3.1 F0 coverage\nAli Seleit extracted DNA from the F0, F1, and F2, and sequenced the F0 and F1 samples with the Illumina platform at high coverage (~26x for Cab and ~29x for Kaga), as measured by SAMtools (Danecek et al. 2021). Figure 3.1 sets out the mean sequencing depth within each chromosome and across the whole genome for the Cab and Kaga F0 samples. We then sequenced the F2 samples at low coverage (~1x), which would be sufficient to map their genotypes back to the genotypes of their parental strains (see Chapter 5 for further details).\n\n\nCode\n# Set variables\n\nIN = list.files(\"/hps/nobackup/birney/users/ian/somites/coverage/hdrr/bwamem2\",\n                     full.names = T) %>% \n  as.list()\nOUT_PNG = \"/hps/software/users/birney/ian/repos/somites/book/plots/coverage/F0_coverage.png\"\nOUT_PDF = \"/hps/software/users/birney/ian/repos/somites/book/plots/coverage/F0_coverage.pdf\"\n\n# Read in files\n\nnames(IN) = IN %>% \n  unlist() %>% \n  basename() %>% \n  stringr::str_remove(\".txt\")\n\ndat_list = purrr::map(IN, function(FILE){\n  readr::read_tsv(FILE) %>% \n    dplyr::rename(chrom = '#rname') %>% \n    dplyr::filter(chrom != \"MT\") %>% \n    dplyr::mutate(chrom = factor(chrom, levels = 1:24))\n})\n\n# Plot\n\nfig_cab = dat_list[[\"Cab\"]] %>% \n  ggplot() + \n  geom_col(aes(chrom, meandepth, fill = chrom)) + \n  cowplot::theme_cowplot() +\n  #facet_wrap(~SAMPLE, nrow = 2) + \n  scale_x_discrete(breaks = 1:24) +\n  guides(fill = \"none\") +\n  xlab(\"chromosome\") +\n  ylab(\"mean depth\") +\n  ggtitle(\"Cab\",\n          subtitle = paste(\"mean: \", \n                           round(mean(dat_list[[\"Cab\"]]$meandepth),\n                                 digits = 2),\n                           sep = \"\")\n          ) + \n  theme(plot.title = element_text(hjust = 0.5),\n        plot.subtitle = element_text(hjust = 0.5))\n\nfig_kaga = dat_list[[\"Kaga\"]] %>% \n  ggplot() + \n  geom_col(aes(chrom, meandepth, fill = chrom)) + \n  cowplot::theme_cowplot() +\n  #facet_wrap(~SAMPLE, nrow = 2) + \n  scale_x_discrete(breaks = 1:24) +\n  guides(fill = \"none\") +\n  xlab(\"chromosome\") +\n  ylab(\"mean depth\") +\n  ggtitle(\"Kaga\",\n          subtitle = paste(\"mean: \", \n                           round(mean(dat_list[[\"Kaga\"]]$meandepth),\n                                 digits = 2),\n                           sep = \"\")\n  ) + \n  theme(plot.title = element_text(hjust = 0.5),\n        plot.subtitle = element_text(hjust = 0.5))\n\n\n# Put together\n\nout = cowplot::plot_grid(fig_cab,\n                         fig_kaga,\n                         align = \"hv\",\n                         axis = \"tblr\",nrow = 2,labels = c(\"A\", \"B\"),label_size = 16)\n\nout\n\n\n\n\n\nFigure 3.1: Mean sequencing depth per chromosome for Cab and Kaga F0 strains, with genome-wide mean depth across all chromosomes shown under the subtitles. Code adapted from rule coverage_plot_F0 in https://github.com/brettellebi/somites/blob/master/workflow/rules/08_extra.smk."
  },
  {
    "objectID": "03-F0-homozygosity.html#f0-homozygosity",
    "href": "03-F0-homozygosity.html#f0-homozygosity",
    "title": "3  F0 homozygosity",
    "section": "3.2 F0 homozygosity",
    "text": "3.2 F0 homozygosity\nBefore proceeding to map the F2 sequences to the genotypes of the F0 generation, we first investigated the levels of homozygosity in the F0 Cab and Kaga strains, as this would affect our ability to accurately call the F2 generation. That is to say, for regions where either F0 parent is consistently heterozygous, it would be difficult to determine the parent from which a particular F2 individual derived its chromosomes at that locus. We therefore aligned the high-coverage sequencing data for the F0 Cab and Kaga strains to the medaka HdrR reference (Ensembl release 104, build ASM223467v1) using BWA-MEM2 (Vasimuddin et al. 2019), sorted the aligned .sam files, marked duplicate reads, and merged the paired reads with picard (“Picard Toolkit” 2019), and indexed the .bam files with SAMtools (Li et al. 2009). The Snakemake modules used to map and align these samples are set out here and here.\nTo call variants, we followed the GATK best practices (to the extent they were applicable) (McKenna et al. 2010; DePristo et al. 2011; Van der Auwera and O’Connor 2020) with GATK’s HaplotypeCaller and GenotypeGVCFs tools (Poplin et al. 2018), then merged all calls into a single .vcf file with picard (“Picard Toolkit” 2019). Finally, we extracted the biallelic calls for Cab and Kaga with bcftools (Danecek et al. 2021), counted the number of SNPs within non-overlapping, 5-kb bins, and calculated the proportion of SNPs within each bin that were homozgyous.\nFigure 3.2 is a circos plot generated with circlize (Gu et al. 2014) for the Cab F0 strain used in this experiment, featuring the proportion of homozygous SNPs per 5-kb bin (green), and the total number of SNPs in each bin (yellow). As expected for a strain that has been inbred for over 10 generations, the mean homozygosity for this strain is high, with a mean proportion of homozygosity across all bins of 83%.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\nlibrary(circlize)\n\n# Set variables\n\nIN_FILE = \"/hps/nobackup/birney/users/ian/somites/genos/F0_and_F1/hdrr/counts/Cab/5000.csv\"\nCHROM_LENGTHS = here::here(\"config/hdrr_chrom_lengths.csv\")\nREF = \"hdrr\"\nSAMPLE = \"Cab\"\nBIN_LENGTH = 5000\nPAL = \"#43AA8B\"\nOUT_PNG = here::here(\"book/plots/circos/trio_homo/hdrr/5000/Cab.png\")\n\n\n# Get lighter/darker functions\n\nsource(\"https://gist.githubusercontent.com/brettellebi/c5015ee666cdf8d9f7e25fa3c8063c99/raw/91e601f82da6c614b4983d8afc4ef399fa58ed4b/karyoploteR_lighter_darker.R\")\n\n\n# Read in data\n\ngenos = readr::read_csv(IN_FILE)\n\nchroms = readr::read_csv(CHROM_LENGTHS,\n                         col_names = c(\"CHROM\", \"LENGTH\")) %>% \n  # remove MT\n  dplyr::filter(CHROM != \"MT\") %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                START = 1) %>% \n  dplyr::select(CHROM, START, END = LENGTH)\n\n# Process variables\n\nif (SAMPLE == \"F1\"){\n  TARGET_CHROM = \"PROP_HET\"\n} else {\n  TARGET_CHROM = \"PROP_HOM\"\n}\n\nif (REF == \"hdrr\"){\n  REF = \"HdrR\"\n} else if (REF == \"hni\"){\n  REF = \"HNI\"\n}\n\n# Process `genos`\n\nhomozyg = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, dplyr::all_of(TARGET_CHROM))\n\nn_vars = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, TOT_HITS) \n\n########################\n# PNG\n########################\n\n# Set output\n\npng(OUT_PNG,\n    width = 20,\n    height = 20,\n    units = \"cm\",\n    res = 500)\n\n# Create Circos plots\n\ncircos.par(cell.padding = c(0, 0, 0, 0),\n           track.margin = c(0, 0),\n           gap.degree = c(rep(1, nrow(chroms) - 1), 8))\n\n# Initialize plot\n\ncircos.initializeWithIdeogram(chroms,\n                              plotType = c(\"axis\", \"labels\"),\n                              major.by = 1e7,\n                              axis.labels.cex = 0.25*par(\"cex\"))\n\nif (SAMPLE == \"F1\"){\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nheterozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n} else {\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nhomozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n}\n# Add label to center\ntext(0, 0, CENTER_LAB)\n\n# Add proportion of homozygosity\n\ncircos.genomicTrack(homozyg,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = PAL,\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, 1))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 0.5, 1),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n# y-axis title\n\nif (SAMPLE == \"F1\"){\n  AXIS_LAB = \"proportion\\nheterozygous\"\n} else {\n  AXIS_LAB = \"proportion\\nhomozygous\"\n}\n\ncircos.text(0, 0.25,\n            labels = AXIS_LAB,\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\n# Add number of hits\n\n## get max number of variants\n\nMAX_VARS = max(n_vars$TOT_HITS, na.rm = T)\n\ncircos.genomicTrack(n_vars,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = \"#F3B700\",\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, MAX_VARS))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 500),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n\ncircos.text(0, 0,\n            labels = \"N variants\\nper bin\",\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\ndev.off()\n\n\n\n\n\n\n\nFigure 3.2: Proportion of homozygous SNPs within 5 kb bins in the Cab F0 generation genome (green), and number of SNPs in each bin (yellow). Code set out in rule circos_homozygosity in https://github.com/brettellebi/somites/blob/master/workflow/rules/04_trio_homozygosity.smk.\n\n\n\n\nHowever, the levels of homozygosity in the Kaga strain used in this experiment was far lower, with a mean homozygosity across all bins of only 31% (Figure 3.3). This was a surprise, as it is an established strain that has been extant for decades, and we therefore expected the level of homozygosity to be commensurate with that observed in the Cab strain. An obvious exception is chr22, for which Kaga appears to be homozygous across its entire length.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\nlibrary(circlize)\n\n# Set variables\n\nIN_FILE = \"/hps/nobackup/birney/users/ian/somites/genos/F0_and_F1/hdrr/counts/Kaga/5000.csv\"\nCHROM_LENGTHS = here::here(\"config/hdrr_chrom_lengths.csv\")\nREF = \"hdrr\"\nSAMPLE = \"Kaga\"\nBIN_LENGTH = 5000\nPAL = \"#DE3C4B\"\nOUT_PNG = here::here(\"book/plots/circos/trio_homo/hdrr/5000/Kaga.png\")\n\n\n# Get lighter/darker functions\n\nsource(\"https://gist.githubusercontent.com/brettellebi/c5015ee666cdf8d9f7e25fa3c8063c99/raw/91e601f82da6c614b4983d8afc4ef399fa58ed4b/karyoploteR_lighter_darker.R\")\n\n\n# Read in data\n\ngenos = readr::read_csv(IN_FILE)\n\nchroms = readr::read_csv(CHROM_LENGTHS,\n                         col_names = c(\"CHROM\", \"LENGTH\")) %>% \n  # remove MT\n  dplyr::filter(CHROM != \"MT\") %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                START = 1) %>% \n  dplyr::select(CHROM, START, END = LENGTH)\n\n# Process variables\n\nif (SAMPLE == \"F1\"){\n  TARGET_CHROM = \"PROP_HET\"\n} else {\n  TARGET_CHROM = \"PROP_HOM\"\n}\n\nif (REF == \"hdrr\"){\n  REF = \"HdrR\"\n} else if (REF == \"hni\"){\n  REF = \"HNI\"\n}\n\n# Process `genos`\n\nhomozyg = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, dplyr::all_of(TARGET_CHROM))\n\nn_vars = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, TOT_HITS) \n\n########################\n# PNG\n########################\n\n# Set output\n\npng(OUT_PNG,\n    width = 20,\n    height = 20,\n    units = \"cm\",\n    res = 500)\n\n# Create Circos plots\n\ncircos.par(cell.padding = c(0, 0, 0, 0),\n           track.margin = c(0, 0),\n           gap.degree = c(rep(1, nrow(chroms) - 1), 8))\n\n# Initialize plot\n\ncircos.initializeWithIdeogram(chroms,\n                              plotType = c(\"axis\", \"labels\"),\n                              major.by = 1e7,\n                              axis.labels.cex = 0.25*par(\"cex\"))\n\nif (SAMPLE == \"F1\"){\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nheterozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n} else {\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nhomozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n}\n# Add label to center\ntext(0, 0, CENTER_LAB)\n\n# Add proportion of homozygosity\n\ncircos.genomicTrack(homozyg,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = PAL,\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, 1))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 0.5, 1),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n# y-axis title\n\nif (SAMPLE == \"F1\"){\n  AXIS_LAB = \"proportion\\nheterozygous\"\n} else {\n  AXIS_LAB = \"proportion\\nhomozygous\"\n}\n\ncircos.text(0, 0.25,\n            labels = AXIS_LAB,\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\n# Add number of hits\n\n## get max number of variants\n\nMAX_VARS = max(n_vars$TOT_HITS, na.rm = T)\n\ncircos.genomicTrack(n_vars,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = \"#F3B700\",\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, MAX_VARS))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 500),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n\ncircos.text(0, 0,\n            labels = \"N variants\\nper bin\",\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\ndev.off()\n\n\n\n\n\n\n\nFigure 3.3: Proportion of homozygous SNPs within 5 kb bins in the Kaga F0 generation genome (red), and number of SNPs in each bin (yellow). Code set out in rule circos_homozygosity in https://github.com/brettellebi/somites/blob/master/workflow/rules/04_trio_homozygosity.smk\n\n\n\n\nTo determine whether the low levels of observed homozygosity in Kaga was affected by its alignments to the southern Japanese HdrR reference, we also aligned the F0 samples to the northern Japanese HNI reference (Figure 3.4). This did not make differences to the levels of observed homozygosity in either sample, which gave us confidence that the low homozygosity observed in Kaga was not driven by reference bias. The low homozygosity of this Kaga individual must have resulted from the strain having been contaminated at some stage by breeding with a different inbred strain prior to when they received the individuals.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\nlibrary(circlize)\n\n# Set variables\n\nIN_FILE = \"/hps/nobackup/birney/users/ian/somites/genos/F0_and_F1/hni/counts/Kaga/5000.csv\"\nCHROM_LENGTHS = here::here(\"config/hdrr_chrom_lengths.csv\")\nREF = \"hni\"\nSAMPLE = \"Kaga\"\nBIN_LENGTH = 5000\nPAL = \"#DE3C4B\"\nOUT_PNG = here::here(\"book/plots/circos/trio_homo/hni/5000/Kaga.png\")\n\n\n# Get lighter/darker functions\n\nsource(\"https://gist.githubusercontent.com/brettellebi/c5015ee666cdf8d9f7e25fa3c8063c99/raw/91e601f82da6c614b4983d8afc4ef399fa58ed4b/karyoploteR_lighter_darker.R\")\n\n\n# Read in data\n\ngenos = readr::read_csv(IN_FILE)\n\nchroms = readr::read_csv(CHROM_LENGTHS,\n                         col_names = c(\"CHROM\", \"LENGTH\")) %>% \n  # remove MT\n  dplyr::filter(CHROM != \"MT\") %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                START = 1) %>% \n  dplyr::select(CHROM, START, END = LENGTH)\n\n# Process variables\n\nif (SAMPLE == \"F1\"){\n  TARGET_CHROM = \"PROP_HET\"\n} else {\n  TARGET_CHROM = \"PROP_HOM\"\n}\n\nif (REF == \"hdrr\"){\n  REF = \"HdrR\"\n} else if (REF == \"hni\"){\n  REF = \"HNI\"\n}\n\n# Process `genos`\n\nhomozyg = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, dplyr::all_of(TARGET_CHROM))\n\nn_vars = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, TOT_HITS) \n\n########################\n# PNG\n########################\n\n# Set output\n\npng(OUT_PNG,\n    width = 20,\n    height = 20,\n    units = \"cm\",\n    res = 500)\n\n# Create Circos plots\n\ncircos.par(cell.padding = c(0, 0, 0, 0),\n           track.margin = c(0, 0),\n           gap.degree = c(rep(1, nrow(chroms) - 1), 8))\n\n# Initialize plot\n\ncircos.initializeWithIdeogram(chroms,\n                              plotType = c(\"axis\", \"labels\"),\n                              major.by = 1e7,\n                              axis.labels.cex = 0.25*par(\"cex\"))\n\nif (SAMPLE == \"F1\"){\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nheterozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n} else {\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nhomozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n}\n# Add label to center\ntext(0, 0, CENTER_LAB)\n\n# Add proportion of homozygosity\n\ncircos.genomicTrack(homozyg,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = PAL,\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, 1))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 0.5, 1),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n# y-axis title\n\nif (SAMPLE == \"F1\"){\n  AXIS_LAB = \"proportion\\nheterozygous\"\n} else {\n  AXIS_LAB = \"proportion\\nhomozygous\"\n}\n\ncircos.text(0, 0.25,\n            labels = AXIS_LAB,\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\n# Add number of hits\n\n## get max number of variants\n\nMAX_VARS = max(n_vars$TOT_HITS, na.rm = T)\n\ncircos.genomicTrack(n_vars,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = \"#F3B700\",\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, MAX_VARS))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 500),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n\ncircos.text(0, 0,\n            labels = \"N variants\\nper bin\",\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\ndev.off()\n\n\n\n\n\n\n\nFigure 3.4: Proportion of homozygous SNPs within 5 kb bins in the Kaga F0 generation genome when aligned to the HNI reference (red), and number of SNPs in each bin (yellow). Code adapted from rule circos_homozygosity in https://github.com/brettellebi/somites/blob/master/workflow/rules/04_trio_homozygosity.smk.\n\n\n\n\n\n\n\n\nDanecek, Petr, James K Bonfield, Jennifer Liddle, John Marshall, Valeriu Ohan, Martin O Pollard, Andrew Whitwham, et al. 2021. “Twelve Years of SAMtools and BCFtools.” GigaScience 10 (2): giab008. https://doi.org/10.1093/gigascience/giab008.\n\n\nDePristo, Mark A., Eric Banks, Ryan Poplin, Kiran V. Garimella, Jared R. Maguire, Christopher Hartl, Anthony A. Philippakis, et al. 2011. “A Framework for Variation Discovery and Genotyping Using Next-Generation DNA Sequencing Data.” Nature Genetics 43 (5, 5): 491–98. https://doi.org/10.1038/ng.806.\n\n\nGu, Zuguang, Lei Gu, Roland Eils, Matthias Schlesner, and Benedikt Brors. 2014. “Circlize Implements and Enhances Circular Visualization in R.” Bioinformatics 30 (19): 2811–12. https://doi.org/10.1093/bioinformatics/btu393.\n\n\nLi, Heng, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils Homer, Gabor Marth, Goncalo Abecasis, Richard Durbin, and 1000 Genome Project Data Processing Subgroup. 2009. “The Sequence Alignment/Map (SAM) Format and SAMtools.” Bioinformatics 25 (16): 2078–79.\n\n\nMcKenna, Aaron, Matthew Hanna, Eric Banks, Andrey Sivachenko, Kristian Cibulskis, Andrew Kernytsky, Kiran Garimella, et al. 2010. “The Genome Analysis Toolkit: A MapReduce Framework for Analyzing Next-Generation DNA Sequencing Data.” Genome Research 20 (9): 1297–1303. https://doi.org/10.1101/gr.107524.110.\n\n\n“Picard Toolkit.” 2019. Broad Institute, GitHub Repository. https://broadinstitute.github.io/picard/; Broad Institute.\n\n\nPoplin, Ryan, Valentin Ruano-Rubio, Mark A. DePristo, Tim J. Fennell, Mauricio O. Carneiro, Geraldine A. Van der Auwera, David E. Kling, et al. 2018. “Scaling Accurate Genetic Variant Discovery to Tens of Thousands of Samples.” bioRxiv. https://doi.org/10.1101/201178.\n\n\nVan der Auwera, Geraldine A., and Brian D. O’Connor. 2020. Genomics in the Cloud: Using Docker, GATK, and WDL in Terra. O’Reilly Media.\n\n\nVasimuddin, Md, Sanchit Misra, Heng Li, and Srinivas Aluru. 2019. “Efficient Architecture-Aware Acceleration of BWA-MEM for Multicore Systems.” In 2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS), 314–24. IEEE."
  },
  {
    "objectID": "04-F1-heterozygosity.html",
    "href": "04-F1-heterozygosity.html",
    "title": "4  F1 heterozygosity",
    "section": "",
    "text": "We next examined the level of heterozygosity in the F1 generation from the Cab-Kaga cross. The pipelines used to align and call variants for this sample are set out here and here. Figure 4.1 shows the level of heterozygosity across the genome of the F1 hybrid in brown measured by the proportion of heterozygous SNPs within 5-kb bins (brown), and the number of SNPs in each bin (yellow). Approximately half the chromosomes show inconsistent heterozygosity, with a mean heterozygosity across all bins of 67%. This lower level of apparent heterozygosity than expected was likely caused by the low levels of homozygosity in the Kaga F0 parent.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\nlibrary(circlize)\n\n# Set variables\n\nIN_FILE = \"/hps/nobackup/birney/users/ian/somites/genos/F0_and_F1/hdrr/counts/F1/5000.csv\"\nCHROM_LENGTHS = here::here(\"config/hdrr_chrom_lengths.csv\")\nREF = \"hdrr\"\nSAMPLE = \"F1\"\nBIN_LENGTH = 5000\nPAL = \"#381D2A\"\nOUT_PNG = here::here(\"book/plots/circos/trio_homo/hdrr/5000/F1.png\")\n\n\n# Get lighter/darker functions\n\nsource(\"https://gist.githubusercontent.com/brettellebi/c5015ee666cdf8d9f7e25fa3c8063c99/raw/91e601f82da6c614b4983d8afc4ef399fa58ed4b/karyoploteR_lighter_darker.R\")\n\n\n# Read in data\n\ngenos = readr::read_csv(IN_FILE)\n\nchroms = readr::read_csv(CHROM_LENGTHS,\n                         col_names = c(\"CHROM\", \"LENGTH\")) %>% \n  # remove MT\n  dplyr::filter(CHROM != \"MT\") %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                START = 1) %>% \n  dplyr::select(CHROM, START, END = LENGTH)\n\n# Process variables\n\nif (SAMPLE == \"F1\"){\n  TARGET_CHROM = \"PROP_HET\"\n} else {\n  TARGET_CHROM = \"PROP_HOM\"\n}\n\nif (REF == \"hdrr\"){\n  REF = \"HdrR\"\n} else if (REF == \"hni\"){\n  REF = \"HNI\"\n}\n\n# Process `genos`\n\nhomozyg = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, dplyr::all_of(TARGET_CHROM))\n\nn_vars = genos %>% \n  dplyr::mutate(CHROM = CHROM %>% \n                  stringr::str_replace(pattern = \"^\", replacement = \"chr\"),\n                BIN_START = (BIN -1) * BIN_LENGTH + 1,\n                BIN_END = BIN * BIN_LENGTH) %>% \n  dplyr::select(CHROM, BIN_START, BIN_END, TOT_HITS) \n\n########################\n# PNG\n########################\n\n# Set output\n\npng(OUT_PNG,\n    width = 20,\n    height = 20,\n    units = \"cm\",\n    res = 500)\n\n# Create Circos plots\n\ncircos.par(cell.padding = c(0, 0, 0, 0),\n           track.margin = c(0, 0),\n           gap.degree = c(rep(1, nrow(chroms) - 1), 8))\n\n# Initialize plot\n\ncircos.initializeWithIdeogram(chroms,\n                              plotType = c(\"axis\", \"labels\"),\n                              major.by = 1e7,\n                              axis.labels.cex = 0.25*par(\"cex\"))\n\nif (SAMPLE == \"F1\"){\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nheterozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n} else {\n  CENTER_LAB = paste(SAMPLE,\n                     \"\\nhomozygosity\\nand\\nvariant count\",\n                     \"\\nwithin\\n\",\n                     BIN_LENGTH / 1000,\n                     \"kb bins\",\n                     \"\\n\\n\",\n                     REF,\n                     \" reference\",\n                     sep = \"\")\n}\n# Add label to center\ntext(0, 0, CENTER_LAB)\n\n# Add proportion of homozygosity\n\ncircos.genomicTrack(homozyg,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = PAL,\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, 1))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 0.5, 1),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n# y-axis title\n\nif (SAMPLE == \"F1\"){\n  AXIS_LAB = \"proportion\\nheterozygous\"\n} else {\n  AXIS_LAB = \"proportion\\nhomozygous\"\n}\n\ncircos.text(0, 0.25,\n            labels = AXIS_LAB,\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\n# Add number of hits\n\n## get max number of variants\n\nMAX_VARS = max(n_vars$TOT_HITS, na.rm = T)\n\ncircos.genomicTrack(n_vars,\n                    panel.fun = function(region, value, ...) {\n                      circos.genomicLines(region,\n                                          value,\n                                          type = \"h\",\n                                          col = \"#F3B700\",\n                                          cex = 0.05)\n                    },\n                    track.height = 0.12,\n                    bg.border = NA,\n                    ylim = c(0, MAX_VARS))\n# y-axis label\ncircos.yaxis(side = \"right\",\n             at = c(0, 500),\n             labels.cex = 0.25*par(\"cex\"),\n             tick.length = 2\n)\n\ncircos.text(0, 0,\n            labels = \"N variants\\nper bin\",\n            sector.index = \"chr1\",\n            facing = \"clockwise\",\n            adj = c(0, -0.5),\n            cex = 0.3*par(\"cex\"))\n\ndev.off()\n\n\n\n\n\n\n\nFigure 4.1: Proportion of heterozygous SNPs within 5 kb bins in the Cab-Kaga F1 cross (brown), and number of SNPs in each bin (yellow). Code adapted from rule circos_homozygosity in https://github.com/brettellebi/somites/blob/master/workflow/rules/04_trio_homozygosity.smk.\n\n\n\n\nFor the purpose of mapping the F2 sample sequences to the genomes of their parental strains, we selected only biallelic SNPs that were homozygous-divergent in the F0 generation (i.e. homozygous reference allele in Cab and homozygous alternative allele in Kaga or vice versa) and heterozygous in the F1 generation. The number of SNPs that met these criteria per chromosome are set out in Figure 4.2. The strong homozygosity of Kaga on chr22 is likely responsible for the much greater number of loci on that chromosome that can be used for calling genoytpes in the F2 generation, and highlights the importance of the parental strains being highly homozygous when used in experimental crosses such as this.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\n\n# Get variables\n\n## Debug\n\nIN = \"/hps/nobackup/birney/users/ian/somites/sites_files/F0_Cab_Kaga/hdrr/homo_divergent/F1_het_min_DP.txt\"\n\ndf = readr::read_tsv(IN,\n                     col_names = c(\"CHROM\", \"POS_1\", \"POS_2\", \"REF\", \"ALT\", \"F0_1_GT\", \"F0_2_GT\"))\n\n# Plot\n\ndf %>% \n  dplyr::count(CHROM) %>% \n  dplyr::mutate(CHROM = factor(CHROM, levels = sort(unique(CHROM)))) %>% \n  ggplot() +\n  geom_col(aes(CHROM, n, fill = CHROM)) +\n  guides(fill = \"none\") +\n  cowplot::theme_cowplot() +\n  xlab(\"chromosome\") + \n  ylab(\"count\") +\n  scale_y_continuous(labels = scales::comma)\n\n\n\n\n\nFigure 4.2: Number of SNPs per chromosome that were homozygous-divergent in the F0 Cab and Kaga generations, and heterozygous in the F1 generation. Code adapted from rule plot_SNP_counts_per_chr in https://github.com/brettellebi/somites/blob/master/workflow/rules/04_trio_homozygosity.smk."
  },
  {
    "objectID": "05-F2-genotyping.html#alignment-and-estimation-of-crossover-events-per-chromosome",
    "href": "05-F2-genotyping.html#alignment-and-estimation-of-crossover-events-per-chromosome",
    "title": "5  F2 genotyping",
    "section": "5.1 Alignment and estimation of crossover events per chromosome",
    "text": "5.1 Alignment and estimation of crossover events per chromosome\nTo maximise the efficiency of our sequencing runs, we “shallow-sequenced” the F2 generation with the short-read Illumina platform at a depth of ~1x. We then aligned these sequences to the HdrR reference with BWA-MEM2 (Vasimuddin et al. 2019), sorted the reads and marked duplicates with Picard (“Picard Toolkit” 2019), then indexed the resulting BAM files with SAMtools (Danecek et al. 2021). The Snakemake module used to map the sequences to the reference is set out here.\nIt would be inappropriate to genotype these shallow sequences with the same method as we used for the high-coverage sequences for the F0 and F1 generation. We therefore used a different method whereby we used bam-readcount (Khanna et al. 2022) to count the reads that supported either the Cab or the Kaga allele for all SNPs that met the criteria described above in Chapter 4, summed the read counts within 5 kb blocks, and calculated the frequency of reads within each bin that supported the Kaga allele. This generated a value for each bin between 0 and 1, where 0 signified that all reads within that bin supported the Cab allele, and 1 signified that all reads within that bin supported the Kaga allele. Bins containing no reads were imputed with a value of 0.5."
  },
  {
    "objectID": "05-F2-genotyping.html#hmm-for-calling-recombination-blocks",
    "href": "05-F2-genotyping.html#hmm-for-calling-recombination-blocks",
    "title": "5  F2 genotyping",
    "section": "5.2 HMM for calling recombination blocks",
    "text": "5.2 HMM for calling recombination blocks\nWe then used these values for all F2 individuals as the input to a Hidden Markov Model (HMM) with the software package hmmlearn (Hmmlearn/Hmmlearn [2014] 2022), which we applied to classify each bin as one of three states, with state 0 corresponding to homozygous-Cab, 1 corresponding to heterozygous, and 2 corresponding to homozygous-Kaga. Across each chromosome of every sample, the output of the HMM was expected to produce a sequence of states. Based on previous biological knowledge that crossover events occur on average less than once per chromosome (Haenel et al. 2018) (see Figure 5.1 for the average crossover rates per chromosome in zebrafish), we expected to observe the same state persisting for long stretches of the chromosome, only changing to another state between 0 and 3 times, and rarely more. To achieve this, we adjusted the HMM’s transition probabilities to be extremely low, and the Gaussian emission probabilities for each state to have a variance of 0.8, which resulted in long “blocks” of the same genotype call across the chromosome with only a small number of average transitions (i.e. crossover events) per chromosome. The Snakemake module used to call recombination blocks in the F2 generation is set out here.\n\n\nCode\n# Which species have a genome length of nearly 800 Mb?\n#readr::read_tsv(here::here(\"results/haenel_2018_S4.txt\"),\n#                       comment = \"#\") %>% \n#  dplyr::group_by(Species) %>% \n#  dplyr::summarise(TOT_LEN = sum(Physical.map.length.Mb)) %>% \n#  dplyr::arrange(desc(TOT_LEN))\n\n# Cyprinus carpio (common carp) has a total genome length of 847.66 Mb (similar to 800 Mb in medaka)\ndf = readr::read_tsv(here::here(\"results/haenel_2018_S4.txt\"),\n                       comment = \"#\") %>% \n  dplyr::filter(Species %in% c(\"Danio.renio\")) %>%\n  dplyr::mutate(Species = dplyr::recode(Species,\n                                        \"Cyprinus.carpio\" = \"common carp\",\n                                        \"Homo.sapiens\" = \"human\",\n                                        \"Danio.renio\" = \"zebrafish\")) %>% \n  dplyr::mutate(Chromosome = Chromosome %>% stringr::str_remove(\"Chr\"),\n                Chromosome = Chromosome %>% \n                  as.numeric(.) %>% \n                  factor(., levels = 1:25)) %>% \n  dplyr::mutate(\"crossovers per chromosome\" = Crossover.rate * Physical.map.length.Mb / 100) \n\n# Get mean crossovers per chromosome\nmean_crossovers = mean(df$`crossovers per chromosome`)\n# Plot\ndf %>% \n  ggplot() +\n  geom_col(aes(Chromosome, `crossovers per chromosome`, fill = Chromosome)) +\n  cowplot::theme_cowplot() +\n  xlab(\"chromosome\") +\n  guides(fill = \"none\") +\n  labs(title = \"Zebrafish\",\n       subtitle = paste(\"mean: \", mean_crossovers, sep = \"\"))\n\n\n\n\n\nFigure 5.1: Crossovers per chromosome based on data provided in file S4 of Haenel et al. (2018), where “crossovers per chromosome” for each chromosome \\(c\\) was calculated by \\(\\frac{crossover~rate_{c}(cM / Mb) \\times length_{c}(Mb)} {100}\\). The medaka genome is shorter in length than the zebrafish genome (~800 Mb compared to ~1,300 Mb), which according to the authors would suggest that medaka likely has a higher average crossover rate than what is presented in this figure.\n\n\n\n\nFigure 5.2 shows how adjusting the HMM parameters changed the called genotypes for 10 F2 samples on chromosome 18, by way of an example. Allowing the HMM to train itself for the transition probabilities and emission variances, the HMM produced an apparently noisy output (A). Fixing the transition probabilities to make it very likely for a state to transition back to itself rather than to another state did not appear to change the output (B). However, increasing the Gaussian emission variances created the “blocks” that I expected, and the higher the emission variances, the “tighter” the blocks (C-F).\n\n\nCode\n# Load libraries\nlibrary(tidyverse)\nlibrary(cowplot)\n\n# Set variables\n\nIN = list(\n  \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn/None/5000/A.csv\",\n  \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn/None/5000/B.csv\",\n  \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn/None/5000/D.csv\",\n  \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn/None/5000/C.csv\",\n  \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn/None/5000/F.csv\",\n  \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn/None/5000/G.csv\"\n)\n\n###################\n# Extra variables\n###################\n\n# Plot only chr 18 as an example\nTARGET_CHROM = 18\n\nBIN_LENGTH = 5000\n\nstates = 0:2\n\npal_hom_het_2 = c(\"#43AA8B\", \"#000022\", \"#DE3C4B\")\nnames(pal_hom_het_2) = states\n\n# Set recode vector\n\nrecode_vec = c(`0` = \"Homozygous Cab\",\n               `1` = \"Heterozygous\",\n               `2` = \"Homozygous Kaga\")\n\n######################\n# Function for titles\n######################\n\nget_titles = function(MOD){\n  if (MOD == \"A\"){\n    mod = \"Standard HMM\"\n  } else if (MOD == \"B\"){\n    mod = \"Fixed transition probabilities\"\n  } else if (MOD == \"C\"){\n    mod = \"Fixed transition probabilities\\nEmission variances of 0.33\"\n  } else if (MOD == \"D\"){\n    mod = \"Fixed transition probabilities\\nEmission variances of 0.01\"\n  } else if (MOD == \"E\"){\n    mod = \"Error states (0.15 prob of entering error state)\\nVariances: 0.2 for true state, 1 for error state\"\n  } else if (MOD == \"F\"){\n    mod = \"Fixed transition probabilities\\nEmission variances of 0.8\"\n  } else if (MOD == \"G\"){\n    mod = \"Fixed transition probabilities\\nEmission variances of 1\"\n  }\n  return(mod)\n}\n\n\n###################\n# Read in data\n###################\n\ndat_list = purrr::map(IN, function(DF){\n  DF %>% \n    readr::read_csv(., col_types = \"iiiiiidi\") %>% \n    # add key variables\n    dplyr::mutate(BIN_START = (BIN * BIN_LENGTH) + 1,\n                  BIN_END = ((BIN + 1) * BIN_LENGTH)) \n})\n\n# Set names\nnames(dat_list) = unlist(IN) %>% \n  basename() %>% \n  stringr::str_remove(\".csv\")\n\n# Read in total medaka genome count\n\n## Get chromosome lengths\nmed_chr_lens = read.table(here::here(\"data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt\"),\n                          col.names = c(\"chr\", \"end\"))\n## Add start\nmed_chr_lens$start = 1\n## Reorder\nmed_chr_lens = med_chr_lens %>% \n  dplyr::select(chr, start, end) %>% \n  # remove MT\n  dplyr::filter(chr != \"MT\")\n## Total HdrR sequence length\ntotal_hdrr_bases = sum(med_chr_lens$end)\n\n\n###################\n# Plot\n###################\n\n# Make list of plots\n\ncounter = 0\nfig_list = purrr::map(dat_list, function(DF){\n  counter <<- counter + 1\n  # Get title\n  mod = get_titles(names(dat_list)[counter])\n  # Plot\n  scatter = DF %>%\n    # get Mb\n    dplyr::mutate(BIN_MB = BIN_START/1e6) %>% \n    dplyr::filter(CHROM == TARGET_CHROM) %>% \n    dplyr::mutate(STATE = factor(STATE, levels = states)) %>% \n    ggplot() +\n    geom_point(aes(BIN_MB, PROP_KAGA, colour = STATE),\n               size = 0.5) +\n    scale_colour_manual(values = pal_hom_het_2) +\n    facet_grid(rows = vars(SAMPLE)) +\n    cowplot::theme_cowplot(rel_large = 13/14,\n                           rel_small = 11/14) +\n    scale_y_continuous(breaks = c(0,0.5,1)) +\n    ggtitle(mod) +\n    xlab(\"bin start (Mb)\") + \n    ylab(\"frequency of SNPs within bin\\nthat align with the Kaga allele\")\n})\n\n# Compile\n\nlegend = cowplot::get_legend(fig_list[[1]] + \n                               guides(color = guide_legend(title = \"HMM state\")))\n\nout = cowplot::plot_grid(fig_list[[1]] +\n                            guides(colour = \"none\") +\n                            theme(legend.position='none',\n                                  axis.title.y = element_blank()),\n                          fig_list[[2]] +\n                           guides(colour = \"none\") +\n                           theme(legend.position='none') +\n                            theme(axis.title.y = element_blank()),\n                          fig_list[[3]]  +\n                           guides(colour = \"none\") +\n                           theme(legend.position='none'),\n                          fig_list[[4]]  +\n                           guides(colour = \"none\") +\n                           theme(legend.position='none') +\n                            theme(axis.title.y = element_blank()),\n                          fig_list[[5]]  +\n                           guides(colour = \"none\") +\n                           theme(legend.position='none',\n                                 axis.title.y = element_blank()),\n                          fig_list[[6]]  +\n                           guides(colour = \"none\") +\n                           theme(legend.position='none') +\n                            theme(axis.title.y = element_blank()),\n                          align = \"hv\", ncol = 2, axis = \"tblr\",\n                         labels = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),\n                         label_size = 16)\n\n# Add legend\nout = cowplot::plot_grid(out,\n                         cowplot::plot_grid(NULL, legend, NULL, ncol = 1),\n                         rel_widths=c(1, 0.2))\n    \n\nout\n\n\n\n\n\nFigure 5.2: HMM states called for each bin across chr18 for 10 F2 samples, to illustrate the effect of changing the HMM’s transition probabilities and emission variances. States 0, 1, and 2 correspond to homozygous Cab, heterozygous, and homozygous Kaga. Each point represents a 5-kb bin. Y-axis is the proportion of reads within each bin that align to the Kaga allele. X-axis is the bp location of the start of each bin. A: Standard HMM with all model parameters trained on the data. B. HMM with fixed transition probabilities of 0 \\(\\rightarrow\\) 0 or 1 \\(\\rightarrow\\) 1 or 2 \\(\\rightarrow\\) 2 = 0.999; 0 \\(\\rightarrow\\) 1 or 2 \\(\\rightarrow\\) 1 = 0.00066; 0 \\(\\rightarrow\\) 2 or 2 \\(\\rightarrow\\) 0 = 0.000333; 1 \\(\\rightarrow\\) 0 or 1 \\(\\rightarrow\\) 2 = 0.0005. C-F retain those transition probabilities but with different fixed emission variances of 0.01 (C), 0.33 (D), 0.8 (E), and 1 (F). Code adapted from rule compile_scatters_thesis in https://github.com/brettellebi/somites/blob/master/workflow/rules/08_extra.smk."
  },
  {
    "objectID": "05-F2-genotyping.html#recombination-blocks",
    "href": "05-F2-genotyping.html#recombination-blocks",
    "title": "5  F2 genotyping",
    "section": "5.3 Recombination blocks",
    "text": "5.3 Recombination blocks\nWe used these genotype-block calls to generate the recombination karyoplot shown in Figure 5.3, with homozygous-Cab blocks in green, heterozoygous blocks in navy blue, and homozygous Kaga blocks in red. Missing calls are blank, where the vertical blank lines indicate that the region could not be called for any F2 individuals, likely due to an insufficient number of informative SNPs residing in those 5-kb blocks; and horizontal blank lines indicate that the sample could not be called, likely due to low sequencing coverage for that sample.\n\n\n\n\n\nFigure 5.3: Recombination blocks in 622 F2 samples based on the ratio of reads mapping to either the Cab or Kaga allele within 5-kb bins, with homozygous-Cab blocks in green, heterozoygous blocks in navy blue, and homozygous Kaga blocks in red. Most blocks show 0-2 crossover events, as expected, with some regions showing higher numbers of crossovers interpreted as noise. Unfilled regions are those with no state called by the HMM due to a lack of reads mapping to SNPs within those 5-kb bins. Code set out in rule plot_true_hmmlearn in https://github.com/brettellebi/somites/blob/master/workflow/rules/05_2_F2_calling.smk.\n\n\n\n\nIn the downstream analysis, we excluded the 22 samples that showed poor coverage across the genome. For the remaining samples, I “filled” the bins with missing genotypes based on the call of the previous called bin, or if unavailable (e.g. the missing bin was at the start of the chromosome), then the next called bin (Figure 5.4); note that this figure retains the low-coverage samples (horizontal blank lines) that were excluded from further analysis to allow for a direct comparison with Figure 5.3. I used these filled genotype calls for the association tests described below in Chapter 6. As a rough way to estimate the accuracy of this genotyping method, we checked the genotypes called by the HMM for the reporter region on chr16 ~28.7Mb against our collaborators’ manual recording of reporter gene counts based on the intensity of the Her7-Venus reporter’s fluorescence. The confusion matrix below shows that 83% of genotypes called by the HMM were consistent with the reporter genotypes as inferred from fluorescence brightness.\n\n\n\n\n\n\n\nThese karyoplots show interesting recombination patterns for several chromosomes. Given the F2 individuals were selected for the reporter gene on chr16, as expected, there appears to be a strong strong skew towards those genotypes across the whole chromosome. On chr3, most samples are homozygous-Cab for the second half of the chromosome, with a consistent breakpoint around ~22 Mb. However, the final fifth of samples which show a different recombination pattern. The samples are sorted based on the order that they were phenotyped and sequenced, so this difference could have been caused by their being generated from different F1 individuals with distinct haplotypes.\n\n\n\n\n\nFigure 5.4: Recombination blocks in 622 F2 samples based on the ratio of reads mapping to either the Cab or Kaga allele within 5-kb bins, with homozygous-Cab blocks in green, heterozoygous blocks in navy blue, and homozygous Kaga blocks in red. Most blocks show 0-2 crossover events, as expected, with some regions showing higher numbers of crossovers interpreted as noise. Bins with missing genotypes were “filled” based on the call of the previous called bin, or if unavailable (e.g. the missing bin was at the start of the chromosome), then the next called bin. Code set out in rule plot_true_hmmlearn in https://github.com/brettellebi/somites/blob/master/workflow/rules/05_2_F2_calling.smk.\n\n\n\n\nFigure 5.5 shows the proportion of 5-kb bins called as either homozygous-Cab, heterozygous, or homozygous-Kaga within each F2 sample (points). The ordinary expectation for the ratios would be 0.25, 0.5, and 0.25 respectively. However, we observe a skew towards homozygous-Cab and away from homozygous Kaga. This was likely caused by the lower level of homozygosity in Kaga, and also potentially a degree of hybrid incompatibility between Cab and Kaga, given the two strains were derived from populations that are thought to be at the point of speciation.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\nlibrary(karyoploteR)\nlibrary(ggbeeswarm)\n\n# Get variables\n\n## Debug\nBIN_LENGTH = as.numeric(\"5000\")\nIN_FILE = \"/hps/nobackup/birney/users/ian/somites/hmm_out/F2/hdrr/hmmlearn_true/None/5000/0.8.csv\"\nLOW_COV_SAMPLES = here::here(\"config/low_cov_samples.list\")\nCOV = as.numeric(\"0.8\")\nMAX_READS = \"None\"\n\n######################\n# Number of states\n######################\n\nN_STATES = 3\n\n######################\n# Palette and plotting params\n######################\n\npal_hom_het_2 = c(\"#43AA8B\", \"#000022\", \"#DE3C4B\", \"#FBF5F3\")\nnames(pal_hom_het_2) = c(0:2, \"UNCLASSIFIED\")\n\npal_hom_het_2_lines = c(karyoploteR::darker(pal_hom_het_2[1], 100),\n                        karyoploteR::lighter(pal_hom_het_2[2], 100),\n                        karyoploteR::darker(pal_hom_het_2[3], 100),\n                        karyoploteR::darker(pal_hom_het_2[4]))\nnames(pal_hom_het_2_lines) = c(0:2, \"UNCLASSIFIED\")\n\n\n# Recode vector\n\nrecode_vec = c(`0` = \"Homozygous Cab\",\n               `1` = \"Heterozygous\",\n               `2` = \"Homozygous Kaga\")\n\n\n# Set states to loop over\n\nstates = 0:(N_STATES - 1)\n\n\n######################\n# Read in data\n######################\n\ndf = readr::read_csv(IN_FILE,\n                     col_types = \"iiiiiidi\") %>% \n  # add key variables\n  dplyr::mutate(BIN_START = (BIN * BIN_LENGTH) + 1,\n                BIN_END = ((BIN + 1) * BIN_LENGTH)) \n\n# Get low-coverage samples\n\nlow_cov_samples = readr::read_tsv(LOW_COV_SAMPLES, col_names = c(\"FID\", \"SAMPLE\")) %>% \n  dplyr::pull(SAMPLE)\n\n# Read in total medaka genome count\n\n## Get chromosome lengths\nmed_chr_lens = read.table(here::here(\"data/Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt\"),\n                          col.names = c(\"chr\", \"end\"))\n## Add start\nmed_chr_lens$start = 1\n## Reorder\nmed_chr_lens = med_chr_lens %>% \n  dplyr::select(chr, start, end) %>% \n  # remove MT\n  dplyr::filter(chr != \"MT\")\n## Total HdrR sequence length\ntotal_hdrr_bases = sum(med_chr_lens$end)\n\n# Get number of samples (for setting the height of the Karyoplots)\n\nN_SAMPLES = unique(df$SAMPLE) %>% \n  length()\n\n#######################\n# Total sites covered by each state\n#######################\n\n# All sites\n\nprop_sites_tot = df %>% \n    # get counts of sites per LANE and state\n    dplyr::group_by(SAMPLE, STATE) %>% \n    dplyr::count() %>% \n    # spread to one row per LANE\n    tidyr::pivot_wider(id_cols = SAMPLE, names_from = STATE, values_from = n) %>% \n    # calculate frequencies of states per LANE\n    dplyr::mutate(TOTAL = sum(`0`, `1`, `2`),\n                  FREQ_0 = `0` / TOTAL,\n                  FREQ_1 = `1` / TOTAL,\n                  FREQ_2 = `2` / TOTAL) %>% \n    # gather\n    tidyr::pivot_longer(cols = starts_with(\"FREQ_\"),\n                        names_to = \"STATE\",\n                        names_prefix = \"FREQ_\",\n                        values_to = \"FREQ\") %>% \n    # order STATE and recode with meaning\n    dplyr::mutate(STATE = factor(STATE, levels = states),\n                  STATE_RECODE = dplyr::recode(STATE, !!!recode_vec)) %>% \n    # plot\n    ggplot(aes(STATE_RECODE, FREQ, colour = STATE, fill = STATE)) +\n    geom_violin() +\n    geom_boxplot(width = .5) +\n    ggbeeswarm::geom_quasirandom(color=\"#7D8491\", size=0.4, alpha=0.9) +\n    theme_bw() +\n    scale_colour_manual(values = pal_hom_het_2_lines) +\n    scale_fill_manual(values = pal_hom_het_2) +\n    guides(colour = \"none\", fill = \"none\") +\n    xlab(\"Genotype\") +\n    ylab(\"Frequency\") +\n    ggtitle(paste(\"Emission (co)variances: \", \n                  COV,\n                  \"\\nMax reads per bin: \",\n                  MAX_READS,\n                  \"\\nBin length: \",\n                  BIN_LENGTH,\n                  sep = \"\"))\n\nprop_sites_tot\n\n\n\n\n\nFigure 5.5: Proportions of 5-kb blocks called as either homozygous-Cab, heterozygous, or homozygous-Kaga. Code adapted from rule plot_true_hmmlearn in https://github.com/brettellebi/somites/blob/master/workflow/rules/05_2_F2_calling.smk.\n\n\n\n\n\n\n\n\nDanecek, Petr, James K Bonfield, Jennifer Liddle, John Marshall, Valeriu Ohan, Martin O Pollard, Andrew Whitwham, et al. 2021. “Twelve Years of SAMtools and BCFtools.” GigaScience 10 (2): giab008. https://doi.org/10.1093/gigascience/giab008.\n\n\nHaenel, Quiterie, Telma G. Laurentino, Marius Roesti, and Daniel Berner. 2018. “Meta-Analysis of Chromosome-Scale Crossover Rate Variation in Eukaryotes and Its Significance to Evolutionary Genomics.” Molecular Ecology 27 (11): 2477–97. https://doi.org/10.1111/mec.14699.\n\n\nHmmlearn/Hmmlearn. (2014) 2022. hmmlearn. https://github.com/hmmlearn/hmmlearn.\n\n\nKhanna, Ajay, David E. Larson, Sridhar Nonavinkere Srivatsan, Matthew Mosior, Travis E. Abbott, Susanna Kiwala, Timothy J. Ley, et al. 2022. “Bam-Readcount - Rapid Generation of Basepair-Resolution Sequence Metrics.” Journal of Open Source Software 7 (69): 3722. https://doi.org/10.21105/joss.03722.\n\n\n“Picard Toolkit.” 2019. Broad Institute, GitHub Repository. https://broadinstitute.github.io/picard/; Broad Institute.\n\n\nVasimuddin, Md, Sanchit Misra, Heng Li, and Srinivas Aluru. 2019. “Efficient Architecture-Aware Acceleration of BWA-MEM for Multicore Systems.” In 2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS), 314–24. IEEE."
  },
  {
    "objectID": "06-GWAS.html#genetic-relationship-matrix",
    "href": "06-GWAS.html#genetic-relationship-matrix",
    "title": "6  GWAS",
    "section": "6.1 Genetic Relationship Matrix",
    "text": "6.1 Genetic Relationship Matrix\nFinally, we used the called recombination blocks as pseudo-SNPs in a genetic linkage analysis. To detect associations between the pseudo-SNPs and the three phenotypes of interest, we used a linear mixed model (LMM) as implemented in GCTA (Yang et al. 2011). For the genetic relationship matrix (GRM), we additionally used the leave-one-chromosome-out implementation of GCTA’s LMM, with excludes the chromosome on which the candidate SNP is located when calculating the GRM. A GRM constructed from the entire genome is presented as a heatmap in Figure 6.1, with each sample represented on each axis, and lighter colours representing a higher degree of relatedness between a pair of samples. The square in the top right-hand corner is created by samples ~550-648, which, based on Figure 5.4 above, clearly have distinct genotypes to the rest of the samples due to their having been bred from different F1 parents.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\nlibrary(genio)\n\n# Set variables\n\nIN_PREF = \"/hps/nobackup/birney/users/ian/somites/beds/F2/hdrr/None/5000/0.8\"\nLOW_COV = c(26, 89, 166, 178, 189, 227, 239, 470, 472, 473, 490, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511) %>% \n  as.character()\n\n# Read in files\n\n## Read bed\nfam = genio::read_fam(IN_PREF)\nbim = genio::read_bim(IN_PREF)\ndf_genos = genio::read_bed(IN_PREF,\n                           names_loci = bim$id,\n                           names_ind = fam$id) %>% \n  as.data.frame()\n\n\n# Get indexes of all non-low coverage samples\nind_keep = which(!as.character(fam$id) %in% LOW_COV)\n# Filter out low-cov samples from `fam` and `df_genos`\ndf_genos = df_genos[, ind_keep]\nfam = fam %>% \n  dplyr::filter(!id %in% LOW_COV)\n\n# Convert genos to matrix\n\nx = df_genos %>% \n  # transpose\n  t(.) %>% \n  # convert back to data frame\n  as.data.frame(.)\n\n# Compute GRM \"manually\"\n# Following guidance here: https://zjuwhw.github.io/2021/08/20/GRM.html\n\nn = dim(x)[1]\nm = dim(x)[2]\n# For each SNP, sum the ALT alleles and divide by 2n to get the ALT allele frequency\np_hat = apply(x, 2, sum)/(2*n)\n# Standardise matrix by allele frequency\nw = apply(rbind(x,p_hat), 2, function(x) (x-2*x[length(x)])/sqrt(2*x[length(x)]*(1-x[length(x)])))[1:n,]\n\n# Cacluate the GRM\nA = w %*% t(w) / m\n\n#########################\n# Plot GRM\n#########################\n\n# Order\nord = hclust(dist(A, method = \"euclidean\"), method = \"ward.D\")$order\n#labs = rownames(A)[ord]\n## Get labs with cross\n#labs_x = tibble(SAMPLE = labs) %>% \n#  dplyr::left_join(f2 %>% \n#                     dplyr::select(SAMPLE, PAT_MAT),\n#                   by = \"SAMPLE\") %>% \n#  # combine\n#  dplyr::mutate(S_X = paste(SAMPLE, PAT_MAT, sep = \"_\"))\n\n# Order matrix\nA_ord = A[ord, ord]\n\n# Convert to DF\ndf_fig = A_ord %>% \n  as.data.frame() %>% \n  tibble::rownames_to_column(var = \"SAMPLE_1\") %>% \n  tidyr::pivot_longer(-c(SAMPLE_1), names_to = \"SAMPLE_2\", values_to = \"VALUE\")\n\nfig = df_fig %>% \n  ggplot() +\n  geom_tile(aes(x = SAMPLE_1, y = SAMPLE_2, fill = VALUE)) +\n  scale_fill_viridis_c(option = \"plasma\") +\n  theme(aspect.ratio = 1) +\n  theme(axis.text.x = element_text(angle = 90),\n        axis.text = element_text(size = 2)) +\n  xlab(\"sample A\") +\n  ylab(\"sample B\")\n\nfig\n\n\n\n\n\nFigure 6.1: GRM generated for 600 F2 samples using Equations @ref(eq:grmstd) and @ref(eq:grm). Code adapted from rule make_grm_man in https://github.com/brettellebi/somites/blob/master/workflow/rules/08_relationship_metrics.smk.\n\n\n\n\nAs described above in Chapter 2, the microscope used to image the embryos (either AU or DB) differed in heat by 0.7-0.8°C, which likely caused differences in the measurements observed. In an attempt to avoid complications resulting from its inclusion, we inverse-normalised the period phenotype within each microscope group, transforming the phenotype to fit a normal distribution across both microscopes (displayed in Figure 2.5). We only show the results from this transformed phenotype in the following section.\nTo set the significance threshold, we permuted the phenotype across samples using 10 different random seeds, together with all covariates when included, and ran a separate linkage model for each permutation. We then set the lowest \\(p\\)-value from all 10 permutation as the significance threshold for the non-permuted model. We additionally applied a Bonferroni correction to our \\(p\\)-values by dividing \\(\\alpha\\) (0.05) by the number of pseudo-SNPs in the model, and set this as a secondary threshold."
  },
  {
    "objectID": "06-GWAS.html#period-intercept",
    "href": "06-GWAS.html#period-intercept",
    "title": "6  GWAS",
    "section": "6.2 Period intercept",
    "text": "6.2 Period intercept\nFigure 6.2 is a Manhattan plot of the genetic linkage results for the period intercept phenotype, inverse-normalised within microscopes as shown in Figure 2.5. The regions found to be significant based on the permutations’ minimum \\(p\\)-value are set out in Table 6.1.\n\n\nCode\n# Load libraries\n\nlibrary(tidyverse)\n\n# Set variables\n\nIN = \"/hps/nobackup/birney/users/ian/somites/gcta/mlma_loco_invnorm/true/hdrr/None/5000/0.8/intercept.loco.mlma\"\nMIN_P = \"/hps/nobackup/birney/users/ian/somites/gcta/mlma_loco_invnorm/min_p/hdrr/None/5000/0.8/intercept.csv\"\nBIN_LENGTH = 5000\nCOV = 0.8\nPHENO = \"intercept\"\n\n########################\n# Plotting parameters\n########################\n\ngwas_pal = c(\"#2B2D42\", \"#F7B267\", \"#F25C54\")\nnames(gwas_pal) = c(\"target\", \"even chr\", \"odd chr\")\n\n# Intercept\nintercept_pal = c(\"#EF476F\", \"#8D99AE\", \"#2b2d42\")\nnames(intercept_pal) = c(\"target\", \"even chr\", \"odd chr\")\n\n# PSM\nunsegmented_psm_area_pal = c(\"#E59500\", \"#9C6FC3\", \"#401F3E\")\nnames(unsegmented_psm_area_pal) = c(\"target\", \"even chr\", \"odd chr\")\n\n########################\n# HdrR chromosome data\n########################\n# Get chromosome lengths\nmed_chr_lens = read.table(here::here(\"data\",\n                                     \"Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt\"),\n                          col.names = c(\"chr\", \"end\"))\n# Add start\nmed_chr_lens$start = 1\n# Reorder\nmed_chr_lens = med_chr_lens %>% \n  dplyr::select(chr, start, end) %>% \n  # remove MT\n  dplyr::filter(chr != \"MT\") %>% \n  # convert to integer\n  dplyr::mutate(chr = as.integer(chr)) %>% \n  # Add cumulative bases\n  dplyr::mutate(CUMSUM = cumsum(end),\n                TOT = CUMSUM - end) %>% \n  # Add midpoint for each chr\n  dplyr::mutate(MID_TOT = TOT + (end / 2))\n\n########################\n# Read in files\n########################\n\n# Read in and process data\n\ndf = readr::read_tsv(IN) %>% \n  # Add POS\n  dplyr::mutate(BIN_START = (bp * BIN_LENGTH) + 1,\n                BIN_END = (bp + 1) * BIN_LENGTH) %>% \n  # join chromosome lengths\n  dplyr::left_join(med_chr_lens, by = c(\"Chr\" = \"chr\")) %>% \n  # add x-coord\n  dplyr::mutate(X_COORD = BIN_START + TOT) %>% \n  # change column names\n  dplyr::rename(CHROM = Chr)\n\n# Get significance levels\n\n## Permutations\n\nPERM_SIG = readr::read_csv(MIN_P) %>% \n  dplyr::pull(MIN_P) %>% \n  min(.)\n\n## Bonferroni\n\nBONF_SIG = 0.05 / nrow(df)\n\n# Set title\n\nTITLE = paste(\"Phenotype: \",\n              PHENO,\n              \"\\nSplit inverse-normalised\")\n\nSUBTITLE = paste(\"Emission covariances: \",\n                 COV,\n                 \"\\nBin length: \",\n                 BIN_LENGTH)\n\n# Set palette\n\npal = eval(as.name(paste(PHENO, \"_pal\", sep = \"\")))\n\n########################\n# Manhattan plot function\n########################\n\nplot_man = function(df, title = NULL, subtitle = NULL, gwas_pal, size = 0.5, alpha = 0.5, med_chr_lens, perm_sig = NULL, bonf_sig = NULL){\n  # Create palette\n  pal = rep_len(gwas_pal, length.out = nrow(med_chr_lens))\n  names(pal) = med_chr_lens$chr\n  \n  df = df %>% \n    # create `COLOUR` vector\n    dplyr::mutate(COLOUR = dplyr::case_when(!is.null(perm_sig) & p < perm_sig ~ gwas_pal[1],\n                                            gtools::even(CHROM) ~ gwas_pal[2],\n                                            gtools::odd(CHROM) ~ gwas_pal[3])) %>% \n    dplyr::mutate(CHROM = factor(CHROM, levels = med_chr_lens$chr)) \n  \n  out_plot = df %>% \n    ggplot(aes(x = X_COORD,\n               y = -log10(p),\n               label = BIN_START,\n               label2 = BIN_END)) + \n    geom_point(colour = df$COLOUR,\n               size = size,\n               alpha = alpha) +\n    #scale_color_manual(values = gwas_pal) +\n    scale_x_continuous(breaks = med_chr_lens$MID_TOT, \n                       labels = med_chr_lens$chr) +\n    theme_bw() +\n    theme(panel.grid.major.x = element_blank(),\n          panel.grid.minor.x = element_blank()\n    ) +\n    guides(colour = \"none\") +\n    labs(title = title,\n         subtitle = subtitle) +\n    xlab(\"Chromosome\") +\n    ylab(\"-log10(p-value)\") + \n    # permutations significance level\n    geom_hline(yintercept = -log10(perm_sig), colour = \"#60D394\", linetype = \"dashed\") +\n    geom_text(aes(MID_TOT[1], -log10(perm_sig), label = \"permutations\", vjust = 1), size = 3, colour = \"#60D394\") + \n    # bonferroni significance level\n    geom_hline(yintercept = -log10(bonf_sig), colour = \"#F06449\", linetype = \"dashed\") +\n    geom_text(aes(MID_TOT[1], -log10(bonf_sig), label = \"bonferroni\", vjust = 1), size = 3, colour = \"#F06449\")\n  \n  return(out_plot)\n  \n}\n\n########################\n# Plot and save\n########################\n\n# Plot\nout_plot = plot_man(df,\n                    title = TITLE,\n                    subtitle = SUBTITLE,\n                    gwas_pal = pal,\n                    med_chr_lens = med_chr_lens,\n                    perm_sig = PERM_SIG,\n                    bonf_sig = BONF_SIG)\n\nout_plot\n\n\n\n\n\nFigure 6.2: Manhattan plot of the genetic linkage results for the period intercept phenotype, inverse-normalised across microscopes. Pseudo-SNPs with \\(p\\)-values lower than the permutation significance threshold are highlighted in red. Code adapted from rule get_manhattan_gcta_invnorm in https://github.com/brettellebi/somites/blob/master/workflow/rules/06_2_GWAS_GCTA_split_invnorm.smk.\n\n\n\n\n\n\n\n\nTable 6.1: Significant 5-kb bin ranges for period intercept below the minimum p-value from 10 permutations.\n\n\nChromosome\nBin start\nBin end\nLength (kb)\n\n\n\n\n3\n31880001\n35420000\n3540\n\n\n4\n18090001\n18095000\n5\n\n\n10\n2995001\n3690000\n695\n\n\n\n\n\n\nThese regions contained a total of 46,872 SNPs imputed from the genotype of the F0 parental strains. We ran Ensembl’s Variant Effect Predictor (McLaren et al. 2016) over these SNPs to identify those that would be most likely to have functional consequences. The full counts of SNPs falling into each category of ‘consequence’ are set out in Table 6.2. From this process we identified 38 genes that included a missense variant, 1 that included a missense variant and a start lost (ENSORLG00000014616), and 1 that included a missense variant and a stop lost (ENSORLG00000015149).\n\n\n\n\nTable 6.2: Variant Effect Predictor results for SNPs in the bins.\n\n\nConsequence\nCount\n\n\n\n\nintron variant\n47211\n\n\nintergenic variant\n20045\n\n\nupstream gene variant\n7304\n\n\ndownstream gene variant\n5229\n\n\n3 prime UTR variant\n1082\n\n\nsynonymous variant\n694\n\n\nmissense variant\n383\n\n\n5 prime UTR variant\n201\n\n\nsplice region variant,intron variant\n126\n\n\nmissense variant,splice region variant\n19\n\n\nsplice region variant,synonymous variant\n17\n\n\nstop gained\n3\n\n\nsplice donor variant\n1\n\n\nstart lost\n1\n\n\nstop lost\n1\n\n\nstop lost,splice region variant\n1\n\n\n\n\n\n\nWe then combined these results with bulk RNA-seq that they had performed on F0 Cab and Kaga individuals, to determine which of these genes are expressed in the tail during embryogenesis. This allowed us to reduce to the list to 29 genes, and a gene ontology analysis of this found that the list of genes was enriched for body axis, somitogenesis, and segmentation (see table below). Using this list of genes, we are now in the process of knocking out the Cab allele in the Cab her7venus background to functionally validate whether any of these genes plays a role in setting the tempo of the segmentation clock.\n\n\nCode\nreadr::read_csv(here::here(\"results/final_gene_list.csv\")) %>% \n  # remove the 'Source:...' in square brackets\n  dplyr::mutate(description = stringr::str_remove_all(description, \"\\\\[.*\\\\]\")) %>% \n  # rename columns\n  dplyr::rename(Chromosome = \"chromosome_name\",\n                `Ensembl gene ID` = \"ensembl_gene_id\",\n                Description  = description) %>% \n  DT::datatable()\n\n\n\n\n\n\n\nWe have since begun the process of using the CRISPR-Cas9 system (Campenhout et al. 2019) to knock out some of these candidate genes to determine their effect on the period phenotype. The mespb (ENSORLG00000014656) and pcdh10b (ENSORLG00000020474) genes have both been found to be involved in segmental boundary formation and somite patterning (Hitachi et al. 2008; Rangarajan, Luo, and Sargent 2006), and are highly conserved in vertebrates (Gul et al. 2017; Satou, Imai, and Satoh 2004). Preliminary results have shown that knocking out either of these genes from the Cab strain significantly speeds up somite period development by 2-3 minutes (Figure 6.3 and Figure 6.4)), providing promising evidence that these genes are involved in the establishment of the segmentation clock.\nbook/plots/ali/20221123_email_attachments/Graph3.png\n\n\n\n\n\nFigure 6.3: Period intercept for Cab embryos with CRISPR-Cas9 knock-outs (Campenhout et al. 2019) of mespb and pcdh10b compared to controls. Figure generated by Ali Seleit.\n\n\n\n\n\n\n\n\n\nFigure 6.4: Mean period for Cab embryos with CRISPR-Cas9 knock-outs (Campenhout et al. 2019) of mespb and pcdh10b compared to controls. Figure generated by Ali Seleit."
  },
  {
    "objectID": "06-GWAS.html#psm-area",
    "href": "06-GWAS.html#psm-area",
    "title": "6  GWAS",
    "section": "6.3 PSM area",
    "text": "6.3 PSM area\nFigure 6.5 is a Manhattan plot of the genetic linkage results for the PSM area phenotype. The regions found to be significant based on the permutations’ minimum \\(p\\)-value are set out in the table below, although they exceed the Bonferroni correction threshold as well. I note that this ~6 Mb significant region on chromosome 3 does not overlap at all with the significant region discovered for the period intercept phenotype.\n\n\n\n\n\nFigure 6.5: Manhattan plot of the genetic linkage results for the PSM area phenotype. Pseudo-SNPs with \\(p\\)-values lower than the permutation significance threshold are highlighted in yellow.\n\n\n\n\n\n\n\n\n\n\n\nThis region contained a total of 29,096 SNPs imputed from the genotype of the F0 parental strains. I ran Ensembl’s Variant Effect Predictor (McLaren et al. 2016) over these SNPs to identify those that would be most likely to have functional consequences. The full counts of SNPs falling into each category of ‘consequence’ are set out in the table below.\n\n\n\n\n\n\n\nFrom this process we identified 114 genes that included a missense variant, and 5 that included a both a missense variant and a splice region variant:\n\n\nCode\nreadr::read_tsv(here::here(\"results/annotations_psm/hdrr/None/5000/0.8/unsegmented_psm_area/None/vep_out.txt\"),\n                comment = \"##\") %>% \n  dplyr::rename(\"Uploaded_variation\" = \"#Uploaded_variation\") %>% \n  dplyr::filter(grepl(\"missense\", Consequence)) %>% \n  dplyr::distinct(Gene, Consequence, .keep_all = T) %>% \n  DT::datatable(  )\n\n\n\n\n\n\n\nWe then combined these results with bulk RNA-seq that they had performed on F0 Cab and Kaga individuals, to determine which of these genes are expressed in the unsegmented tail during embryogenesis. This allowed us to reduce to the list to 96 genes, although they were not apparently associated with a specific gene ontology as perhaps expected, given this is a single locus that is potentially driven by just one gene. As with the period intercept phenotype, we are now in the process of knocking out the Cab allele in the Cab her7venus background to assess if any of these genes play a role in determining the size of the PSM and to functionally validate the hits.\nTwo of these genes have shown a phenotype of reduced PSM area, segment boundary problems, and segment size (Figure 6.6 and Figure 6.7). The first, dll1, is a known player in somitogenesis. The second, atxn1l, has not been associated with somitogenesis before, but is a negative regulator of Notch signalling in mice and Drosophila (noting that Notch is a major player in segmentation in all vertebrates).\n\n\n\n\n\nFigure 6.6: Unsegmented PSM area for Cab embryos with CRISPR-Cas9 knock-outs (Campenhout et al. 2019) of fzd3, tcf25, atxn1l and dll compared to controls. Figure generated by Ali Seleit.\n\n\n\n\n\n\n\n\n\nFigure 6.7: Illustrative images of differences in somite segmentation for Cab embryos with CRISPR-Cas9 knock-outs (Campenhout et al. 2019) of fzd3, tcf25, atxn1l and dll1 compared to controls. The atxn1l and dll1 knock-outs show reduced PSM area, segment boundary problems, and segment size. Figure generated by Ali Seleit.\n\n\n\n\n\n\n\n\nCampenhout, Claude Van, Pauline Cabochette, Anne-Clémence Veillard, Miklos Laczik, Agnieszka Zelisko-Schmidt, Céline Sabatel, Maxime Dhainaut, Benoit Vanhollebeke, Cyril Gueydan, and Véronique Kruys. 2019. “Guidelines for Optimized Gene Knockout Using CRISPR/Cas9.” BioTechniques 66 (6): 295–302. https://doi.org/10.2144/btn-2018-0187.\n\n\nGul, Ismail Sahin, Paco Hulpiau, Yvan Saeys, and Frans van Roy. 2017. “Evolution and Diversity of Cadherins and Catenins.” Experimental Cell Research, Cell Sensing and Signaling via Cell-Cell Adhesion, 358 (1): 3–9. https://doi.org/10.1016/j.yexcr.2017.03.001.\n\n\nHitachi, Keisuke, Hiroki Danno, Akiko Kondow, Kiyoshi Ohnuma, Hideho Uchiyama, Shoichi Ishiura, Akira Kurisaki, and Makoto Asashima. 2008. “Physical Interaction Between Tbx6 and Mespb Is Indispensable for the Activation of Bowline Expression During Xenopus Somitogenesis.” Biochemical and Biophysical Research Communications 372 (4): 607–12. https://doi.org/10.1016/j.bbrc.2008.05.083.\n\n\nMcLaren, William, Laurent Gil, Sarah E. Hunt, Harpreet Singh Riat, Graham R. S. Ritchie, Anja Thormann, Paul Flicek, and Fiona Cunningham. 2016. “The Ensembl Variant Effect Predictor.” Genome Biology 17 (1): 122. https://doi.org/10.1186/s13059-016-0974-4.\n\n\nRangarajan, Janaki, Ting Luo, and Thomas D. Sargent. 2006. “PCNS: A Novel Protocadherin Required for Cranial Neural Crest Migration and Somite Morphogenesis in Xenopus.” Developmental Biology 295 (1): 206–18. https://doi.org/10.1016/j.ydbio.2006.03.025.\n\n\nSatou, Yutaka, Kaoru S. Imai, and Nori Satoh. 2004. “The Ascidian Mesp Gene Specifies Heart Precursor Cells.” Development 131 (11): 2533–41. https://doi.org/10.1242/dev.01145.\n\n\nYang, Jian, S. Hong Lee, Michael E. Goddard, and Peter M. Visscher. 2011. “GCTA: A Tool for Genome-wide Complex Trait Analysis.” The American Journal of Human Genetics 88 (1): 76–82. https://doi.org/10.1016/j.ajhg.2010.11.011."
  },
  {
    "objectID": "07-references.html",
    "href": "07-references.html",
    "title": "References",
    "section": "",
    "text": "Campenhout, Claude Van, Pauline Cabochette, Anne-Clémence Veillard,\nMiklos Laczik, Agnieszka Zelisko-Schmidt, Céline Sabatel, Maxime\nDhainaut, Benoit Vanhollebeke, Cyril Gueydan, and Véronique Kruys. 2019.\n“Guidelines for Optimized Gene Knockout Using\nCRISPR/Cas9.” BioTechniques 66\n(6): 295–302. https://doi.org/10.2144/btn-2018-0187.\n\n\nDanecek, Petr, James K Bonfield, Jennifer Liddle, John Marshall, Valeriu\nOhan, Martin O Pollard, Andrew Whitwham, et al. 2021. “Twelve\nYears of SAMtools and BCFtools.”\nGigaScience 10 (2): giab008. https://doi.org/10.1093/gigascience/giab008.\n\n\nDePristo, Mark A., Eric Banks, Ryan Poplin, Kiran V. Garimella, Jared R.\nMaguire, Christopher Hartl, Anthony A. Philippakis, et al. 2011.\n“A Framework for Variation Discovery and Genotyping Using\nNext-Generation DNA Sequencing Data.” Nature\nGenetics 43 (5, 5): 491–98. https://doi.org/10.1038/ng.806.\n\n\nFalk, Henning J, Takehito Tomita, Gregor Mönke, Katie McDole, and\nAlexander Aulehla. 2022. “Imaging the Onset of Oscillatory\nSignaling Dynamics During Mouse Embryo Gastrulation.”\nDevelopment (Cambridge, England) 149 (13): dev200083. https://doi.org/10.1242/dev.200083.\n\n\nGu, Zuguang, Lei Gu, Roland Eils, Matthias Schlesner, and Benedikt\nBrors. 2014. “Circlize Implements and Enhances Circular\nVisualization in R.” Bioinformatics 30\n(19): 2811–12. https://doi.org/10.1093/bioinformatics/btu393.\n\n\nGul, Ismail Sahin, Paco Hulpiau, Yvan Saeys, and Frans van Roy. 2017.\n“Evolution and Diversity of Cadherins and Catenins.”\nExperimental Cell Research, Cell Sensing and\nSignaling via Cell-Cell Adhesion, 358 (1):\n3–9. https://doi.org/10.1016/j.yexcr.2017.03.001.\n\n\nHaenel, Quiterie, Telma G. Laurentino, Marius Roesti, and Daniel Berner.\n2018. “Meta-Analysis of Chromosome-Scale Crossover Rate Variation\nin Eukaryotes and Its Significance to Evolutionary Genomics.”\nMolecular Ecology 27 (11): 2477–97. https://doi.org/10.1111/mec.14699.\n\n\nHitachi, Keisuke, Hiroki Danno, Akiko Kondow, Kiyoshi Ohnuma, Hideho\nUchiyama, Shoichi Ishiura, Akira Kurisaki, and Makoto Asashima. 2008.\n“Physical Interaction Between Tbx6 and Mespb Is\nIndispensable for the Activation of Bowline Expression During\nXenopus Somitogenesis.” Biochemical and\nBiophysical Research Communications 372 (4): 607–12. https://doi.org/10.1016/j.bbrc.2008.05.083.\n\n\nHmmlearn/Hmmlearn. (2014) 2022. hmmlearn. https://github.com/hmmlearn/hmmlearn.\n\n\nKatsumura, Takafumi, Shoji Oda, Hiroshi Mitani, and Hiroki Oota. 2019.\n“Medaka Population Genome Structure and\nDemographic History Described via Genotyping-by-Sequencing.” G3\nGenes|Genomes|Genetics 9 (1): 217–28. https://doi.org/10.1534/g3.118.200779.\n\n\nKhanna, Ajay, David E. Larson, Sridhar Nonavinkere Srivatsan, Matthew\nMosior, Travis E. Abbott, Susanna Kiwala, Timothy J. Ley, et al. 2022.\n“Bam-Readcount - Rapid Generation of Basepair-Resolution Sequence\nMetrics.” Journal of Open Source Software 7 (69): 3722.\nhttps://doi.org/10.21105/joss.03722.\n\n\nKim, Woong, Takaaki Matsui, Masataka Yamao, Makoto Ishibashi, Kota\nTamada, Toru Takumi, Kenji Kohno, et al. 2011. “The Period of the\nSomite Segmentation Clock Is Sensitive to Notch\nActivity.” Molecular Biology of the Cell 22 (18):\n3541–49. https://doi.org/10.1091/mbc.e11-02-0139.\n\n\nLi, Heng, Bob Handsaker, Alec Wysoker, Tim Fennell, Jue Ruan, Nils\nHomer, Gabor Marth, Goncalo Abecasis, Richard Durbin, and 1000 Genome\nProject Data Processing Subgroup. 2009. “The Sequence\nAlignment/Map (SAM) Format and\nSAMtools.” Bioinformatics 25 (16): 2078–79.\n\n\nMatsuda, Mitsuhiro, Hanako Hayashi, Jordi Garcia-Ojalvo, Kumiko\nYoshioka-Kobayashi, Ryoichiro Kageyama, Yoshihiro Yamanaka, Makoto\nIkeya, Junya Toguchida, Cantas Alev, and Miki Ebisuya. 2020.\n“Species-Specific Segmentation Clock Periods Are Due to\nDifferential Biochemical Reaction Speeds.” Science 369\n(6510): 1450–55.\n\n\nMcKenna, Aaron, Matthew Hanna, Eric Banks, Andrey Sivachenko, Kristian\nCibulskis, Andrew Kernytsky, Kiran Garimella, et al. 2010. “The\nGenome Analysis Toolkit: A MapReduce Framework\nfor Analyzing Next-Generation DNA Sequencing Data.”\nGenome Research 20 (9): 1297–1303. https://doi.org/10.1101/gr.107524.110.\n\n\nMcLaren, William, Laurent Gil, Sarah E. Hunt, Harpreet Singh Riat,\nGraham R. S. Ritchie, Anja Thormann, Paul Flicek, and Fiona Cunningham.\n2016. “The Ensembl Variant Effect Predictor.”\nGenome Biology 17 (1): 122. https://doi.org/10.1186/s13059-016-0974-4.\n\n\n“Picard Toolkit.” 2019. Broad Institute, GitHub\nRepository. https://broadinstitute.github.io/picard/; Broad\nInstitute.\n\n\nPoplin, Ryan, Valentin Ruano-Rubio, Mark A. DePristo, Tim J. Fennell,\nMauricio O. Carneiro, Geraldine A. Van der Auwera, David E. Kling, et\nal. 2018. “Scaling Accurate Genetic Variant Discovery to Tens of\nThousands of Samples.” bioRxiv. https://doi.org/10.1101/201178.\n\n\nRangarajan, Janaki, Ting Luo, and Thomas D. Sargent. 2006.\n“PCNS: A Novel Protocadherin Required\nfor Cranial Neural Crest Migration and Somite Morphogenesis in\nXenopus.” Developmental Biology 295 (1):\n206–18. https://doi.org/10.1016/j.ydbio.2006.03.025.\n\n\nSanchez, Paul Gerald Layague, Victoria Mochulska, Christian Mauffette\nDenis, Gregor Mönke, Takehito Tomita, Nobuko Tsuchida-Straeten, Yvonne\nPetersen, Katharina F. Sonnen, Paul François, and Alexander Aulehla.\n2022. “Arnold Tongue Entrainment Reveals Dynamical Principles of\nthe Embryonic Segmentation Clock.” bioRxiv. https://doi.org/10.1101/2021.10.20.465101.\n\n\nSatou, Yutaka, Kaoru S. Imai, and Nori Satoh. 2004. “The Ascidian\nMesp Gene Specifies Heart Precursor Cells.”\nDevelopment 131 (11): 2533–41. https://doi.org/10.1242/dev.01145.\n\n\nSchröter, Christian, and Andrew C. Oates. 2010. “Segment\nNumber and Axial Identity in a\nSegmentation Clock Period Mutant.” Current\nBiology 20 (14): 1254–58. https://doi.org/10.1016/j.cub.2010.05.071.\n\n\nSeleit, Ali, Alexander Aulehla, and Alexandre Paix. 2021.\n“Endogenous Protein Tagging in Medaka Using a Simplified\nCRISPR/Cas9 Knock-in Approach.”\neLife 10 (December): e75050. https://doi.org/10.7554/elife.75050.\n\n\nVan der Auwera, Geraldine A., and Brian D. O’Connor. 2020. Genomics\nin the Cloud: Using Docker, GATK, and\nWDL in Terra. O’Reilly\nMedia.\n\n\nVasimuddin, Md, Sanchit Misra, Heng Li, and Srinivas Aluru. 2019.\n“Efficient Architecture-Aware Acceleration of BWA-MEM\nfor Multicore Systems.” In 2019 IEEE International\nParallel and Distributed Processing Symposium\n(IPDPS), 314–24. IEEE.\n\n\nWichura, Michael J. 1988. “Algorithm AS 241:\nThe Percentage Points of the Normal\nDistribution.” Journal of the Royal Statistical\nSociety. Series C (Applied Statistics) 37 (3): 477–84. https://doi.org/10.2307/2347330.\n\n\nYang, Jian, S. Hong Lee, Michael E. Goddard, and Peter M. Visscher.\n2011. “GCTA: A Tool for Genome-wide Complex Trait Analysis.”\nThe American Journal of Human Genetics 88 (1): 76–82. https://doi.org/10.1016/j.ajhg.2010.11.011."
  }
]